object "plonk_verifier" {
    code {
        function allocate(size) -> ptr {
            ptr := mload(0x40)
            if eq(ptr, 0) { ptr := 0x60 }
            mstore(0x40, add(ptr, size))
        }
        let size := datasize("Runtime")
        let offset := allocate(size)
        datacopy(offset, dataoffset("Runtime"), size)
        return(offset, size)
    }
    object "Runtime" {
        code {
            let success:bool := true
            let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid:bool {
                {
                    let x_lt_p:bool := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let y_lt_p:bool := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let is_affine:bool := eq(x_cube_plus_3, y_square)
                    valid := and(valid, is_affine)
                }
            }
            mstore(0x20, mod(calldataload(0x0), f_q))
            mstore(0x40, mod(calldataload(0x20), f_q))
            mstore(0x60, mod(calldataload(0x40), f_q))
            mstore(0x80, mod(calldataload(0x60), f_q))
            mstore(0xa0, mod(calldataload(0x80), f_q))
            mstore(0xc0, mod(calldataload(0xa0), f_q))
            mstore(0xe0, mod(calldataload(0xc0), f_q))
            mstore(0x100, mod(calldataload(0xe0), f_q))
            mstore(0x120, mod(calldataload(0x100), f_q))
            mstore(0x140, mod(calldataload(0x120), f_q))
            mstore(0x160, mod(calldataload(0x140), f_q))
            mstore(0x180, mod(calldataload(0x160), f_q))
            mstore(0x1a0, mod(calldataload(0x180), f_q))
            mstore(0x1c0, mod(calldataload(0x1a0), f_q))
            mstore(0x1e0, mod(calldataload(0x1c0), f_q))
            mstore(0x200, mod(calldataload(0x1e0), f_q))
            mstore(0x220, mod(calldataload(0x200), f_q))
            mstore(0x240, mod(calldataload(0x220), f_q))
            mstore(0x0, 14420305978530954250148497641842479938797550995059346041247886637006873269850)

            {
                let x := calldataload(0x240)
                mstore(0x260, x)
                let y := calldataload(0x260)
                mstore(0x280, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x280)
                mstore(0x2a0, x)
                let y := calldataload(0x2a0)
                mstore(0x2c0, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x2c0)
                mstore(0x2e0, x)
                let y := calldataload(0x2e0)
                mstore(0x300, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x300)
                mstore(0x320, x)
                let y := calldataload(0x320)
                mstore(0x340, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x340)
                mstore(0x360, x)
                let y := calldataload(0x360)
                mstore(0x380, y)
                success := and(validate_ec_point(x, y), success)
            }
            mstore(0x3a0, keccak256(0x0, 928))
            {
                let hash := mload(0x3a0)
                mstore(0x3c0, mod(hash, f_q))
                mstore(0x3e0, hash)
            }

            {
                let x := calldataload(0x380)
                mstore(0x400, x)
                let y := calldataload(0x3a0)
                mstore(0x420, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x3c0)
                mstore(0x440, x)
                let y := calldataload(0x3e0)
                mstore(0x460, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x400)
                mstore(0x480, x)
                let y := calldataload(0x420)
                mstore(0x4a0, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x440)
                mstore(0x4c0, x)
                let y := calldataload(0x460)
                mstore(0x4e0, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x480)
                mstore(0x500, x)
                let y := calldataload(0x4a0)
                mstore(0x520, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x4c0)
                mstore(0x540, x)
                let y := calldataload(0x4e0)
                mstore(0x560, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x500)
                mstore(0x580, x)
                let y := calldataload(0x520)
                mstore(0x5a0, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x540)
                mstore(0x5c0, x)
                let y := calldataload(0x560)
                mstore(0x5e0, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x580)
                mstore(0x600, x)
                let y := calldataload(0x5a0)
                mstore(0x620, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x5c0)
                mstore(0x640, x)
                let y := calldataload(0x5e0)
                mstore(0x660, y)
                success := and(validate_ec_point(x, y), success)
            }
            mstore(0x680, keccak256(0x3e0, 672))
            {
                let hash := mload(0x680)
                mstore(0x6a0, mod(hash, f_q))
                mstore(0x6c0, hash)
            }
            mstore8(1760, 1)
            mstore(0x6e0, keccak256(0x6c0, 33))
            {
                let hash := mload(0x6e0)
                mstore(0x700, mod(hash, f_q))
                mstore(0x720, hash)
            }

            {
                let x := calldataload(0x600)
                mstore(0x740, x)
                let y := calldataload(0x620)
                mstore(0x760, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x640)
                mstore(0x780, x)
                let y := calldataload(0x660)
                mstore(0x7a0, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x680)
                mstore(0x7c0, x)
                let y := calldataload(0x6a0)
                mstore(0x7e0, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x6c0)
                mstore(0x800, x)
                let y := calldataload(0x6e0)
                mstore(0x820, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x700)
                mstore(0x840, x)
                let y := calldataload(0x720)
                mstore(0x860, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x740)
                mstore(0x880, x)
                let y := calldataload(0x760)
                mstore(0x8a0, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x780)
                mstore(0x8c0, x)
                let y := calldataload(0x7a0)
                mstore(0x8e0, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x7c0)
                mstore(0x900, x)
                let y := calldataload(0x7e0)
                mstore(0x920, y)
                success := and(validate_ec_point(x, y), success)
            }
            mstore(0x940, keccak256(0x720, 544))
            {
                let hash := mload(0x940)
                mstore(0x960, mod(hash, f_q))
                mstore(0x980, hash)
            }

            {
                let x := calldataload(0x800)
                mstore(0x9a0, x)
                let y := calldataload(0x820)
                mstore(0x9c0, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x840)
                mstore(0x9e0, x)
                let y := calldataload(0x860)
                mstore(0xa00, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x880)
                mstore(0xa20, x)
                let y := calldataload(0x8a0)
                mstore(0xa40, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x8c0)
                mstore(0xa60, x)
                let y := calldataload(0x8e0)
                mstore(0xa80, y)
                success := and(validate_ec_point(x, y), success)
            }
            mstore(0xaa0, keccak256(0x980, 288))
            {
                let hash := mload(0xaa0)
                mstore(0xac0, mod(hash, f_q))
                mstore(0xae0, hash)
            }
            mstore(0xb00, mod(calldataload(0x900), f_q))
            mstore(0xb20, mod(calldataload(0x920), f_q))
            mstore(0xb40, mod(calldataload(0x940), f_q))
            mstore(0xb60, mod(calldataload(0x960), f_q))
            mstore(0xb80, mod(calldataload(0x980), f_q))
            mstore(0xba0, mod(calldataload(0x9a0), f_q))
            mstore(0xbc0, mod(calldataload(0x9c0), f_q))
            mstore(0xbe0, mod(calldataload(0x9e0), f_q))
            mstore(0xc00, mod(calldataload(0xa00), f_q))
            mstore(0xc20, mod(calldataload(0xa20), f_q))
            mstore(0xc40, mod(calldataload(0xa40), f_q))
            mstore(0xc60, mod(calldataload(0xa60), f_q))
            mstore(0xc80, mod(calldataload(0xa80), f_q))
            mstore(0xca0, mod(calldataload(0xaa0), f_q))
            mstore(0xcc0, mod(calldataload(0xac0), f_q))
            mstore(0xce0, mod(calldataload(0xae0), f_q))
            mstore(0xd00, mod(calldataload(0xb00), f_q))
            mstore(0xd20, mod(calldataload(0xb20), f_q))
            mstore(0xd40, mod(calldataload(0xb40), f_q))
            mstore(0xd60, mod(calldataload(0xb60), f_q))
            mstore(0xd80, mod(calldataload(0xb80), f_q))
            mstore(0xda0, mod(calldataload(0xba0), f_q))
            mstore(0xdc0, mod(calldataload(0xbc0), f_q))
            mstore(0xde0, mod(calldataload(0xbe0), f_q))
            mstore(0xe00, mod(calldataload(0xc00), f_q))
            mstore(0xe20, mod(calldataload(0xc20), f_q))
            mstore(0xe40, mod(calldataload(0xc40), f_q))
            mstore(0xe60, mod(calldataload(0xc60), f_q))
            mstore(0xe80, mod(calldataload(0xc80), f_q))
            mstore(0xea0, mod(calldataload(0xca0), f_q))
            mstore(0xec0, mod(calldataload(0xcc0), f_q))
            mstore(0xee0, mod(calldataload(0xce0), f_q))
            mstore(0xf00, mod(calldataload(0xd00), f_q))
            mstore(0xf20, mod(calldataload(0xd20), f_q))
            mstore(0xf40, mod(calldataload(0xd40), f_q))
            mstore(0xf60, mod(calldataload(0xd60), f_q))
            mstore(0xf80, mod(calldataload(0xd80), f_q))
            mstore(0xfa0, mod(calldataload(0xda0), f_q))
            mstore(0xfc0, mod(calldataload(0xdc0), f_q))
            mstore(0xfe0, mod(calldataload(0xde0), f_q))
            mstore(0x1000, mod(calldataload(0xe00), f_q))
            mstore(0x1020, mod(calldataload(0xe20), f_q))
            mstore(0x1040, mod(calldataload(0xe40), f_q))
            mstore(0x1060, mod(calldataload(0xe60), f_q))
            mstore(0x1080, mod(calldataload(0xe80), f_q))
            mstore(0x10a0, mod(calldataload(0xea0), f_q))
            mstore(0x10c0, mod(calldataload(0xec0), f_q))
            mstore(0x10e0, mod(calldataload(0xee0), f_q))
            mstore(0x1100, mod(calldataload(0xf00), f_q))
            mstore(0x1120, mod(calldataload(0xf20), f_q))
            mstore(0x1140, mod(calldataload(0xf40), f_q))
            mstore(0x1160, mod(calldataload(0xf60), f_q))
            mstore(0x1180, mod(calldataload(0xf80), f_q))
            mstore(0x11a0, mod(calldataload(0xfa0), f_q))
            mstore(0x11c0, mod(calldataload(0xfc0), f_q))
            mstore(0x11e0, mod(calldataload(0xfe0), f_q))
            mstore(0x1200, mod(calldataload(0x1000), f_q))
            mstore(0x1220, keccak256(0xae0, 1856))
            {
                let hash := mload(0x1220)
                mstore(0x1240, mod(hash, f_q))
                mstore(0x1260, hash)
            }

            {
                let x := calldataload(0x1020)
                mstore(0x1280, x)
                let y := calldataload(0x1040)
                mstore(0x12a0, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x1060)
                mstore(0x12c0, x)
                let y := calldataload(0x1080)
                mstore(0x12e0, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x10a0)
                mstore(0x1300, x)
                let y := calldataload(0x10c0)
                mstore(0x1320, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x10e0)
                mstore(0x1340, x)
                let y := calldataload(0x1100)
                mstore(0x1360, y)
                success := and(validate_ec_point(x, y), success)
            }
            mstore(0x1380, keccak256(0x1260, 288))
            {
                let hash := mload(0x1380)
                mstore(0x13a0, mod(hash, f_q))
                mstore(0x13c0, hash)
            }
            {
                let x := mload(0x60)
                x := add(x, shl(68, mload(0x80)))
                x := add(x, shl(136, mload(0xa0)))
                x := add(x, shl(204, mload(0xc0)))
                mstore(5088, x)
                let y := mload(0xe0)
                y := add(y, shl(68, mload(0x100)))
                y := add(y, shl(136, mload(0x120)))
                y := add(y, shl(204, mload(0x140)))
                mstore(5120, y)

                success := and(validate_ec_point(x, y), success)
            }
            {
                let x := mload(0x160)
                x := add(x, shl(68, mload(0x180)))
                x := add(x, shl(136, mload(0x1a0)))
                x := add(x, shl(204, mload(0x1c0)))
                mstore(5152, x)
                let y := mload(0x1e0)
                y := add(y, shl(68, mload(0x200)))
                y := add(y, shl(136, mload(0x220)))
                y := add(y, shl(204, mload(0x240)))
                mstore(5184, y)

                success := and(validate_ec_point(x, y), success)
            }
            mstore(0x1460, mulmod(mload(0xac0), mload(0xac0), f_q))
            mstore(0x1480, mulmod(mload(0x1460), mload(0x1460), f_q))
            mstore(0x14a0, mulmod(mload(0x1480), mload(0x1480), f_q))
            mstore(0x14c0, mulmod(mload(0x14a0), mload(0x14a0), f_q))
            mstore(0x14e0, mulmod(mload(0x14c0), mload(0x14c0), f_q))
            mstore(0x1500, mulmod(mload(0x14e0), mload(0x14e0), f_q))
            mstore(0x1520, mulmod(mload(0x1500), mload(0x1500), f_q))
            mstore(0x1540, mulmod(mload(0x1520), mload(0x1520), f_q))
            mstore(0x1560, mulmod(mload(0x1540), mload(0x1540), f_q))
            mstore(0x1580, mulmod(mload(0x1560), mload(0x1560), f_q))
            mstore(0x15a0, mulmod(mload(0x1580), mload(0x1580), f_q))
            mstore(0x15c0, mulmod(mload(0x15a0), mload(0x15a0), f_q))
            mstore(0x15e0, mulmod(mload(0x15c0), mload(0x15c0), f_q))
            mstore(0x1600, mulmod(mload(0x15e0), mload(0x15e0), f_q))
            mstore(0x1620, mulmod(mload(0x1600), mload(0x1600), f_q))
            mstore(0x1640, mulmod(mload(0x1620), mload(0x1620), f_q))
            mstore(0x1660, mulmod(mload(0x1640), mload(0x1640), f_q))
            mstore(0x1680, mulmod(mload(0x1660), mload(0x1660), f_q))
            mstore(0x16a0, mulmod(mload(0x1680), mload(0x1680), f_q))
            mstore(0x16c0, mulmod(mload(0x16a0), mload(0x16a0), f_q))
            mstore(0x16e0, mulmod(mload(0x16c0), mload(0x16c0), f_q))
            mstore(0x1700, mulmod(mload(0x16e0), mload(0x16e0), f_q))
            mstore(0x1720, mulmod(mload(0x1700), mload(0x1700), f_q))
            mstore(0x1740, mulmod(mload(0x1720), mload(0x1720), f_q))
            mstore(0x1760, mulmod(mload(0x1740), mload(0x1740), f_q))
            mstore(0x1780, mulmod(mload(0x1760), mload(0x1760), f_q))
            mstore(0x17a0, addmod(mload(0x1780), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
            mstore(0x17c0, mulmod(mload(0x17a0), 21888242545679039938882419398440172875981108180010270949818755658014750055173, f_q))
            mstore(0x17e0, mulmod(mload(0x17c0), 16569469942529664681363945218228869388192121720036659574609237682362097667612, f_q))
            mstore(0x1800, addmod(mload(0xac0), 5318772929309610540882460527028405700356242680379374769088966504213710828005, f_q))
            mstore(0x1820, mulmod(mload(0x17c0), 6047398202650739717314770882059679662647667807426525133977681644606291529311, f_q))
            mstore(0x1840, addmod(mload(0xac0), 15840844669188535504931634863197595425900696592989509209720522541969516966306, f_q))
            mstore(0x1860, mulmod(mload(0x17c0), 17329448237240114492580865744088056414251735686965494637158808787419781175510, f_q))
            mstore(0x1880, addmod(mload(0xac0), 4558794634599160729665540001169218674296628713450539706539395399156027320107, f_q))
            mstore(0x18a0, mulmod(mload(0x17c0), 3693565015985198455139889557180396682968596245011005461846595820698933079918, f_q))
            mstore(0x18c0, addmod(mload(0xac0), 18194677855854076767106516188076878405579768155405028881851608365876875415699, f_q))
            mstore(0x18e0, mulmod(mload(0x17c0), 11377606117859914088982205826922132024839443553408109299929510653283289974216, f_q))
            mstore(0x1900, addmod(mload(0xac0), 10510636753979361133264199918335143063708920847007925043768693533292518521401, f_q))
            mstore(0x1920, mulmod(mload(0x17c0), 14803907026430593724305438564799066516271154714737734572920456128449769927233, f_q))
            mstore(0x1940, addmod(mload(0xac0), 7084335845408681497940967180458208572277209685678299770777748058126038568384, f_q))
            mstore(0x1960, mulmod(mload(0x17c0), 1, f_q))
            mstore(0x1980, addmod(mload(0xac0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
            mstore(0x19a0, mulmod(mload(0x17c0), 13446667982376394161563610564587413125564757801019538732601045199901075958935, f_q))
            mstore(0x19c0, addmod(mload(0xac0), 8441574889462881060682795180669861962983606599396495611097158986674732536682, f_q))
            mstore(0x19e0, mulmod(mload(0x17c0), 6143038923529407703646399695489445107254060255791852207908457597807435305312, f_q))
            mstore(0x1a00, addmod(mload(0xac0), 15745203948309867518600006049767829981294304144624182135789746588768373190305, f_q))
            mstore(0x1a20, mulmod(mload(0x17c0), 21813856626197829021720820945327074612555900476153638460378780375714815148448, f_q))
            mstore(0x1a40, addmod(mload(0xac0), 74386245641446200525584799930200475992463924262395883319423810860993347169, f_q))
            mstore(0x1a60, mulmod(mload(0x17c0), 11451405578697956743456240853980216273390554734748796433026540431386972584651, f_q))
            mstore(0x1a80, addmod(mload(0xac0), 10436837293141318478790164891277058815157809665667237910671663755188835910966, f_q))
            mstore(0x1aa0, mulmod(mload(0x17c0), 2258791456229719674664876333845584462457126852136701862196747426485314788465, f_q))
            mstore(0x1ac0, addmod(mload(0xac0), 19629451415609555547581529411411690626091237548279332481501456760090493707152, f_q))
            mstore(0x1ae0, mulmod(mload(0x17c0), 16670521521732547392407716560529197273408943645332907966320731856743274895475, f_q))
            mstore(0x1b00, addmod(mload(0xac0), 5217721350106727829838689184728077815139420755083126377377472329832533600142, f_q))
            mstore(0x1b20, mulmod(mload(0x17c0), 6973717477794544023251421539913937529504002186168239878624319939785647341572, f_q))
            mstore(0x1b40, addmod(mload(0xac0), 14914525394044731198994984205343337559044362214247794465073884246790161154045, f_q))
            mstore(0x1b60, mulmod(mload(0x17c0), 8374374965308410102411073611984011876711565317741801500439755773472076597347, f_q))
            mstore(0x1b80, addmod(mload(0xac0), 13513867906530865119835332133273263211836799082674232843258448413103731898270, f_q))
            mstore(0x1ba0, mulmod(mload(0x17c0), 7644774028564064345188091774880429238758499926703297575879018755827411518744, f_q))
            mstore(0x1bc0, addmod(mload(0xac0), 14243468843275210877058313970376845849789864473712736767819185430748396976873, f_q))
            mstore(0x1be0, mulmod(mload(0x17c0), 17041886618628883845743410343041491135676788197442345444346654338941897766515, f_q))
            mstore(0x1c00, addmod(mload(0xac0), 4846356253210391376502995402215783952871576202973688899351549847633910729102, f_q))
            mstore(0x1c20, mulmod(mload(0x17c0), 20276212859876996965895067376549928325970197996069741985761123463478912375212, f_q))
            mstore(0x1c40, addmod(mload(0xac0), 1612030011962278256351338368707346762578166404346292357937080723096896120405, f_q))
            mstore(0x1c60, mulmod(mload(0x17c0), 21490807004895109926141140246143262403290679459142140821740925192625185504522, f_q))
            mstore(0x1c80, addmod(mload(0xac0), 397435866944165296105265499114012685257684941273893521957278993950622991095, f_q))
            mstore(0x1ca0, mulmod(mload(0x17c0), 21856635360464150734248258901271514898436182748160009166613717095391832219001, f_q))
            mstore(0x1cc0, addmod(mload(0xac0), 31607511375124487998146843985760190112181652256025177084487091183976276616, f_q))
            mstore(0x1ce0, mulmod(mload(0x17c0), 4947689244094276630090796471410438387704819356682144196760515917874272844658, f_q))
            mstore(0x1d00, addmod(mload(0xac0), 16940553627744998592155609273846836700843545043733890146937688268701535650959, f_q))
            mstore(0x1d20, mulmod(mload(0x17c0), 16070949257099864401214446952969046546611226673215562325034009111680440277863, f_q))
            mstore(0x1d40, addmod(mload(0xac0), 5817293614739410821031958792288228541937137727200472018664195074895368217754, f_q))
            mstore(0x1d60, mulmod(mload(0x17c0), 11211301017135681023579411905410872569206244553457844956874280139879520583390, f_q))
            mstore(0x1d80, addmod(mload(0xac0), 10676941854703594198666993839846402519342119846958189386823924046696287912227, f_q))
            mstore(0x1da0, mulmod(mload(0x17c0), 13950560640343059709470007801605358008980413716864447750775614801472024994001, f_q))
            mstore(0x1dc0, addmod(mload(0xac0), 7937682231496215512776397943651917079567950683551586592922589385103783501616, f_q))
            {
                let prod := mload(0x1800)

                prod := mulmod(mload(0x1840), prod, f_q)
                mstore(0x1de0, prod)
                
                prod := mulmod(mload(0x1880), prod, f_q)
                mstore(0x1e00, prod)
                
                prod := mulmod(mload(0x18c0), prod, f_q)
                mstore(0x1e20, prod)
                
                prod := mulmod(mload(0x1900), prod, f_q)
                mstore(0x1e40, prod)
                
                prod := mulmod(mload(0x1940), prod, f_q)
                mstore(0x1e60, prod)
                
                prod := mulmod(mload(0x1980), prod, f_q)
                mstore(0x1e80, prod)
                
                prod := mulmod(mload(0x19c0), prod, f_q)
                mstore(0x1ea0, prod)
                
                prod := mulmod(mload(0x1a00), prod, f_q)
                mstore(0x1ec0, prod)
                
                prod := mulmod(mload(0x1a40), prod, f_q)
                mstore(0x1ee0, prod)
                
                prod := mulmod(mload(0x1a80), prod, f_q)
                mstore(0x1f00, prod)
                
                prod := mulmod(mload(0x1ac0), prod, f_q)
                mstore(0x1f20, prod)
                
                prod := mulmod(mload(0x1b00), prod, f_q)
                mstore(0x1f40, prod)
                
                prod := mulmod(mload(0x1b40), prod, f_q)
                mstore(0x1f60, prod)
                
                prod := mulmod(mload(0x1b80), prod, f_q)
                mstore(0x1f80, prod)
                
                prod := mulmod(mload(0x1bc0), prod, f_q)
                mstore(0x1fa0, prod)
                
                prod := mulmod(mload(0x1c00), prod, f_q)
                mstore(0x1fc0, prod)
                
                prod := mulmod(mload(0x1c40), prod, f_q)
                mstore(0x1fe0, prod)
                
                prod := mulmod(mload(0x1c80), prod, f_q)
                mstore(0x2000, prod)
                
                prod := mulmod(mload(0x1cc0), prod, f_q)
                mstore(0x2020, prod)
                
                prod := mulmod(mload(0x1d00), prod, f_q)
                mstore(0x2040, prod)
                
                prod := mulmod(mload(0x1d40), prod, f_q)
                mstore(0x2060, prod)
                
                prod := mulmod(mload(0x1d80), prod, f_q)
                mstore(0x2080, prod)
                
                prod := mulmod(mload(0x1dc0), prod, f_q)
                mstore(0x20a0, prod)
                
                prod := mulmod(mload(0x17a0), prod, f_q)
                mstore(0x20c0, prod)
                
            }
            mstore(0x2100, 32)
            mstore(0x2120, 32)
            mstore(0x2140, 32)
            mstore(0x2160, mload(0x20c0))
            mstore(0x2180, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
            mstore(0x21a0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
            success := and(eq(staticcall(gas(), 0x5, 0x2100, 0xc0, 0x20e0, 0x20), 1), success)
            {
                
                let inv := mload(0x20e0)
                let v
                
                v := mload(0x17a0)
                mstore(6048, mulmod(mload(0x20a0), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1dc0)
                mstore(7616, mulmod(mload(0x2080), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1d80)
                mstore(7552, mulmod(mload(0x2060), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1d40)
                mstore(7488, mulmod(mload(0x2040), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1d00)
                mstore(7424, mulmod(mload(0x2020), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1cc0)
                mstore(7360, mulmod(mload(0x2000), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1c80)
                mstore(7296, mulmod(mload(0x1fe0), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1c40)
                mstore(7232, mulmod(mload(0x1fc0), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1c00)
                mstore(7168, mulmod(mload(0x1fa0), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1bc0)
                mstore(7104, mulmod(mload(0x1f80), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1b80)
                mstore(7040, mulmod(mload(0x1f60), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1b40)
                mstore(6976, mulmod(mload(0x1f40), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1b00)
                mstore(6912, mulmod(mload(0x1f20), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1ac0)
                mstore(6848, mulmod(mload(0x1f00), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1a80)
                mstore(6784, mulmod(mload(0x1ee0), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1a40)
                mstore(6720, mulmod(mload(0x1ec0), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1a00)
                mstore(6656, mulmod(mload(0x1ea0), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x19c0)
                mstore(6592, mulmod(mload(0x1e80), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1980)
                mstore(6528, mulmod(mload(0x1e60), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1940)
                mstore(6464, mulmod(mload(0x1e40), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1900)
                mstore(6400, mulmod(mload(0x1e20), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x18c0)
                mstore(6336, mulmod(mload(0x1e00), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1880)
                mstore(6272, mulmod(mload(0x1de0), inv, f_q))
                inv := mulmod(v, inv, f_q)
                
                v := mload(0x1840)
                mstore(6208, mulmod(mload(0x1800), inv, f_q))
                inv := mulmod(v, inv, f_q)
                mstore(0x1800, inv)

            }
            mstore(0x21c0, mulmod(mload(0x17e0), mload(0x1800), f_q))
            mstore(0x21e0, mulmod(mload(0x1820), mload(0x1840), f_q))
            mstore(0x2200, mulmod(mload(0x1860), mload(0x1880), f_q))
            mstore(0x2220, mulmod(mload(0x18a0), mload(0x18c0), f_q))
            mstore(0x2240, mulmod(mload(0x18e0), mload(0x1900), f_q))
            mstore(0x2260, mulmod(mload(0x1920), mload(0x1940), f_q))
            mstore(0x2280, mulmod(mload(0x1960), mload(0x1980), f_q))
            mstore(0x22a0, mulmod(mload(0x19a0), mload(0x19c0), f_q))
            mstore(0x22c0, mulmod(mload(0x19e0), mload(0x1a00), f_q))
            mstore(0x22e0, mulmod(mload(0x1a20), mload(0x1a40), f_q))
            mstore(0x2300, mulmod(mload(0x1a60), mload(0x1a80), f_q))
            mstore(0x2320, mulmod(mload(0x1aa0), mload(0x1ac0), f_q))
            mstore(0x2340, mulmod(mload(0x1ae0), mload(0x1b00), f_q))
            mstore(0x2360, mulmod(mload(0x1b20), mload(0x1b40), f_q))
            mstore(0x2380, mulmod(mload(0x1b60), mload(0x1b80), f_q))
            mstore(0x23a0, mulmod(mload(0x1ba0), mload(0x1bc0), f_q))
            mstore(0x23c0, mulmod(mload(0x1be0), mload(0x1c00), f_q))
            mstore(0x23e0, mulmod(mload(0x1c20), mload(0x1c40), f_q))
            mstore(0x2400, mulmod(mload(0x1c60), mload(0x1c80), f_q))
            mstore(0x2420, mulmod(mload(0x1ca0), mload(0x1cc0), f_q))
            mstore(0x2440, mulmod(mload(0x1ce0), mload(0x1d00), f_q))
            mstore(0x2460, mulmod(mload(0x1d20), mload(0x1d40), f_q))
            mstore(0x2480, mulmod(mload(0x1d60), mload(0x1d80), f_q))
            mstore(0x24a0, mulmod(mload(0x1da0), mload(0x1dc0), f_q))
            {
                let result := mulmod(mload(0x2280), mload(0x20), f_q)
                result := addmod(mulmod(mload(0x22a0), mload(0x40), f_q), result, f_q)
                result := addmod(mulmod(mload(0x22c0), mload(0x60), f_q), result, f_q)
                result := addmod(mulmod(mload(0x22e0), mload(0x80), f_q), result, f_q)
                result := addmod(mulmod(mload(0x2300), mload(0xa0), f_q), result, f_q)
                result := addmod(mulmod(mload(0x2320), mload(0xc0), f_q), result, f_q)
                result := addmod(mulmod(mload(0x2340), mload(0xe0), f_q), result, f_q)
                result := addmod(mulmod(mload(0x2360), mload(0x100), f_q), result, f_q)
                result := addmod(mulmod(mload(0x2380), mload(0x120), f_q), result, f_q)
                result := addmod(mulmod(mload(0x23a0), mload(0x140), f_q), result, f_q)
                result := addmod(mulmod(mload(0x23c0), mload(0x160), f_q), result, f_q)
                result := addmod(mulmod(mload(0x23e0), mload(0x180), f_q), result, f_q)
                result := addmod(mulmod(mload(0x2400), mload(0x1a0), f_q), result, f_q)
                result := addmod(mulmod(mload(0x2420), mload(0x1c0), f_q), result, f_q)
                result := addmod(mulmod(mload(0x2440), mload(0x1e0), f_q), result, f_q)
                result := addmod(mulmod(mload(0x2460), mload(0x200), f_q), result, f_q)
                result := addmod(mulmod(mload(0x2480), mload(0x220), f_q), result, f_q)
                result := addmod(mulmod(mload(0x24a0), mload(0x240), f_q), result, f_q)
                mstore(9408, result)
            }
            mstore(0x24e0, mulmod(mload(0xbc0), mload(0xb00), f_q))
            mstore(0x2500, mulmod(mload(0xbe0), mload(0xb20), f_q))
            mstore(0x2520, addmod(mload(0x24e0), mload(0x2500), f_q))
            mstore(0x2540, mulmod(mload(0xc00), mload(0xb40), f_q))
            mstore(0x2560, addmod(mload(0x2520), mload(0x2540), f_q))
            mstore(0x2580, mulmod(mload(0xc20), mload(0xb60), f_q))
            mstore(0x25a0, addmod(mload(0x2560), mload(0x2580), f_q))
            mstore(0x25c0, mulmod(mload(0xc40), mload(0xb80), f_q))
            mstore(0x25e0, addmod(mload(0x25a0), mload(0x25c0), f_q))
            mstore(0x2600, mulmod(mload(0xb20), mload(0xb00), f_q))
            mstore(0x2620, mulmod(mload(0xc80), mload(0x2600), f_q))
            mstore(0x2640, addmod(mload(0x25e0), mload(0x2620), f_q))
            mstore(0x2660, mulmod(mload(0xb60), mload(0xb40), f_q))
            mstore(0x2680, mulmod(mload(0xca0), mload(0x2660), f_q))
            mstore(0x26a0, addmod(mload(0x2640), mload(0x2680), f_q))
            mstore(0x26c0, mulmod(mload(0xba0), mload(0xc60), f_q))
            mstore(0x26e0, addmod(mload(0x26a0), mload(0x26c0), f_q))
            mstore(0x2700, addmod(mload(0x26e0), mload(0xcc0), f_q))
            mstore(0x2720, mulmod(mload(0x960), mload(0x2700), f_q))
            mstore(0x2740, addmod(1, sub(f_q, mload(0xe60)), f_q))
            mstore(0x2760, mulmod(mload(0x2740), mload(0x2280), f_q))
            mstore(0x2780, addmod(mload(0x2720), mload(0x2760), f_q))
            mstore(0x27a0, mulmod(mload(0x960), mload(0x2780), f_q))
            mstore(0x27c0, mulmod(mload(0xec0), mload(0xec0), f_q))
            mstore(0x27e0, addmod(mload(0x27c0), sub(f_q, mload(0xec0)), f_q))
            mstore(0x2800, mulmod(mload(0x27e0), mload(0x21c0), f_q))
            mstore(0x2820, addmod(mload(0x27a0), mload(0x2800), f_q))
            mstore(0x2840, mulmod(mload(0x960), mload(0x2820), f_q))
            mstore(0x2860, addmod(mload(0xec0), sub(f_q, mload(0xea0)), f_q))
            mstore(0x2880, mulmod(mload(0x2860), mload(0x2280), f_q))
            mstore(0x28a0, addmod(mload(0x2840), mload(0x2880), f_q))
            mstore(0x28c0, mulmod(mload(0x960), mload(0x28a0), f_q))
            mstore(0x28e0, addmod(1, sub(f_q, mload(0x21c0)), f_q))
            mstore(0x2900, addmod(mload(0x21e0), mload(0x2200), f_q))
            mstore(0x2920, addmod(mload(0x2900), mload(0x2220), f_q))
            mstore(0x2940, addmod(mload(0x2920), mload(0x2240), f_q))
            mstore(0x2960, addmod(mload(0x2940), mload(0x2260), f_q))
            mstore(0x2980, addmod(mload(0x28e0), sub(f_q, mload(0x2960)), f_q))
            mstore(0x29a0, mulmod(mload(0xda0), mload(0x6a0), f_q))
            mstore(0x29c0, addmod(mload(0xb00), mload(0x29a0), f_q))
            mstore(0x29e0, addmod(mload(0x29c0), mload(0x700), f_q))
            mstore(0x2a00, mulmod(mload(0xdc0), mload(0x6a0), f_q))
            mstore(0x2a20, addmod(mload(0xb20), mload(0x2a00), f_q))
            mstore(0x2a40, addmod(mload(0x2a20), mload(0x700), f_q))
            mstore(0x2a60, mulmod(mload(0x2a40), mload(0x29e0), f_q))
            mstore(0x2a80, mulmod(mload(0xde0), mload(0x6a0), f_q))
            mstore(0x2aa0, addmod(mload(0xb40), mload(0x2a80), f_q))
            mstore(0x2ac0, addmod(mload(0x2aa0), mload(0x700), f_q))
            mstore(0x2ae0, mulmod(mload(0x2ac0), mload(0x2a60), f_q))
            mstore(0x2b00, mulmod(mload(0x2ae0), mload(0xe80), f_q))
            mstore(0x2b20, mulmod(1, mload(0x6a0), f_q))
            mstore(0x2b40, mulmod(mload(0xac0), mload(0x2b20), f_q))
            mstore(0x2b60, addmod(mload(0xb00), mload(0x2b40), f_q))
            mstore(0x2b80, addmod(mload(0x2b60), mload(0x700), f_q))
            mstore(0x2ba0, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x6a0), f_q))
            mstore(0x2bc0, mulmod(mload(0xac0), mload(0x2ba0), f_q))
            mstore(0x2be0, addmod(mload(0xb20), mload(0x2bc0), f_q))
            mstore(0x2c00, addmod(mload(0x2be0), mload(0x700), f_q))
            mstore(0x2c20, mulmod(mload(0x2c00), mload(0x2b80), f_q))
            mstore(0x2c40, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x6a0), f_q))
            mstore(0x2c60, mulmod(mload(0xac0), mload(0x2c40), f_q))
            mstore(0x2c80, addmod(mload(0xb40), mload(0x2c60), f_q))
            mstore(0x2ca0, addmod(mload(0x2c80), mload(0x700), f_q))
            mstore(0x2cc0, mulmod(mload(0x2ca0), mload(0x2c20), f_q))
            mstore(0x2ce0, mulmod(mload(0x2cc0), mload(0xe60), f_q))
            mstore(0x2d00, addmod(mload(0x2b00), sub(f_q, mload(0x2ce0)), f_q))
            mstore(0x2d20, mulmod(mload(0x2d00), mload(0x2980), f_q))
            mstore(0x2d40, addmod(mload(0x28c0), mload(0x2d20), f_q))
            mstore(0x2d60, mulmod(mload(0x960), mload(0x2d40), f_q))
            mstore(0x2d80, mulmod(mload(0xe00), mload(0x6a0), f_q))
            mstore(0x2da0, addmod(mload(0xb60), mload(0x2d80), f_q))
            mstore(0x2dc0, addmod(mload(0x2da0), mload(0x700), f_q))
            mstore(0x2de0, mulmod(mload(0xe20), mload(0x6a0), f_q))
            mstore(0x2e00, addmod(mload(0xb80), mload(0x2de0), f_q))
            mstore(0x2e20, addmod(mload(0x2e00), mload(0x700), f_q))
            mstore(0x2e40, mulmod(mload(0x2e20), mload(0x2dc0), f_q))
            mstore(0x2e60, mulmod(mload(0xe40), mload(0x6a0), f_q))
            mstore(0x2e80, addmod(mload(0x24c0), mload(0x2e60), f_q))
            mstore(0x2ea0, addmod(mload(0x2e80), mload(0x700), f_q))
            mstore(0x2ec0, mulmod(mload(0x2ea0), mload(0x2e40), f_q))
            mstore(0x2ee0, mulmod(mload(0x2ec0), mload(0xee0), f_q))
            mstore(0x2f00, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x6a0), f_q))
            mstore(0x2f20, mulmod(mload(0xac0), mload(0x2f00), f_q))
            mstore(0x2f40, addmod(mload(0xb60), mload(0x2f20), f_q))
            mstore(0x2f60, addmod(mload(0x2f40), mload(0x700), f_q))
            mstore(0x2f80, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x6a0), f_q))
            mstore(0x2fa0, mulmod(mload(0xac0), mload(0x2f80), f_q))
            mstore(0x2fc0, addmod(mload(0xb80), mload(0x2fa0), f_q))
            mstore(0x2fe0, addmod(mload(0x2fc0), mload(0x700), f_q))
            mstore(0x3000, mulmod(mload(0x2fe0), mload(0x2f60), f_q))
            mstore(0x3020, mulmod(21134065618345176623193549882539580312263652408302468683943992798037078993309, mload(0x6a0), f_q))
            mstore(0x3040, mulmod(mload(0xac0), mload(0x3020), f_q))
            mstore(0x3060, addmod(mload(0x24c0), mload(0x3040), f_q))
            mstore(0x3080, addmod(mload(0x3060), mload(0x700), f_q))
            mstore(0x30a0, mulmod(mload(0x3080), mload(0x3000), f_q))
            mstore(0x30c0, mulmod(mload(0x30a0), mload(0xec0), f_q))
            mstore(0x30e0, addmod(mload(0x2ee0), sub(f_q, mload(0x30c0)), f_q))
            mstore(0x3100, mulmod(mload(0x30e0), mload(0x2980), f_q))
            mstore(0x3120, addmod(mload(0x2d60), mload(0x3100), f_q))
            mstore(0x3140, mulmod(mload(0x960), mload(0x3120), f_q))
            mstore(0x3160, addmod(1, sub(f_q, mload(0xf00)), f_q))
            mstore(0x3180, mulmod(mload(0x3160), mload(0x2280), f_q))
            mstore(0x31a0, addmod(mload(0x3140), mload(0x3180), f_q))
            mstore(0x31c0, mulmod(mload(0x960), mload(0x31a0), f_q))
            mstore(0x31e0, mulmod(mload(0xf00), mload(0xf00), f_q))
            mstore(0x3200, addmod(mload(0x31e0), sub(f_q, mload(0xf00)), f_q))
            mstore(0x3220, mulmod(mload(0x3200), mload(0x21c0), f_q))
            mstore(0x3240, addmod(mload(0x31c0), mload(0x3220), f_q))
            mstore(0x3260, mulmod(mload(0x960), mload(0x3240), f_q))
            mstore(0x3280, addmod(mload(0xf40), mload(0x6a0), f_q))
            mstore(0x32a0, mulmod(mload(0x3280), mload(0xf20), f_q))
            mstore(0x32c0, addmod(mload(0xf80), mload(0x700), f_q))
            mstore(0x32e0, mulmod(mload(0x32c0), mload(0x32a0), f_q))
            mstore(0x3300, mulmod(5, mload(0xd40), f_q))
            mstore(0x3320, mulmod(mload(0x3c0), mload(0x3300), f_q))
            mstore(0x3340, mulmod(mload(0xb00), mload(0xd40), f_q))
            mstore(0x3360, addmod(mload(0x3320), mload(0x3340), f_q))
            mstore(0x3380, addmod(mload(0x3360), mload(0x6a0), f_q))
            mstore(0x33a0, mulmod(mload(0x3380), mload(0xf00), f_q))
            mstore(0x33c0, mulmod(mload(0x3c0), mload(0xce0), f_q))
            mstore(0x33e0, addmod(mload(0x33c0), mload(0xd00), f_q))
            mstore(0x3400, addmod(mload(0x33e0), mload(0x700), f_q))
            mstore(0x3420, mulmod(mload(0x3400), mload(0x33a0), f_q))
            mstore(0x3440, addmod(mload(0x32e0), sub(f_q, mload(0x3420)), f_q))
            mstore(0x3460, mulmod(mload(0x3440), mload(0x2980), f_q))
            mstore(0x3480, addmod(mload(0x3260), mload(0x3460), f_q))
            mstore(0x34a0, mulmod(mload(0x960), mload(0x3480), f_q))
            mstore(0x34c0, addmod(mload(0xf40), sub(f_q, mload(0xf80)), f_q))
            mstore(0x34e0, mulmod(mload(0x34c0), mload(0x2280), f_q))
            mstore(0x3500, addmod(mload(0x34a0), mload(0x34e0), f_q))
            mstore(0x3520, mulmod(mload(0x960), mload(0x3500), f_q))
            mstore(0x3540, mulmod(mload(0x34c0), mload(0x2980), f_q))
            mstore(0x3560, addmod(mload(0xf40), sub(f_q, mload(0xf60)), f_q))
            mstore(0x3580, mulmod(mload(0x3560), mload(0x3540), f_q))
            mstore(0x35a0, addmod(mload(0x3520), mload(0x3580), f_q))
            mstore(0x35c0, mulmod(mload(0x960), mload(0x35a0), f_q))
            mstore(0x35e0, addmod(1, sub(f_q, mload(0xfa0)), f_q))
            mstore(0x3600, mulmod(mload(0x35e0), mload(0x2280), f_q))
            mstore(0x3620, addmod(mload(0x35c0), mload(0x3600), f_q))
            mstore(0x3640, mulmod(mload(0x960), mload(0x3620), f_q))
            mstore(0x3660, mulmod(mload(0xfa0), mload(0xfa0), f_q))
            mstore(0x3680, addmod(mload(0x3660), sub(f_q, mload(0xfa0)), f_q))
            mstore(0x36a0, mulmod(mload(0x3680), mload(0x21c0), f_q))
            mstore(0x36c0, addmod(mload(0x3640), mload(0x36a0), f_q))
            mstore(0x36e0, mulmod(mload(0x960), mload(0x36c0), f_q))
            mstore(0x3700, addmod(mload(0xfe0), mload(0x6a0), f_q))
            mstore(0x3720, mulmod(mload(0x3700), mload(0xfc0), f_q))
            mstore(0x3740, addmod(mload(0x1020), mload(0x700), f_q))
            mstore(0x3760, mulmod(mload(0x3740), mload(0x3720), f_q))
            mstore(0x3780, mulmod(mload(0xb20), mload(0xd40), f_q))
            mstore(0x37a0, addmod(mload(0x3320), mload(0x3780), f_q))
            mstore(0x37c0, addmod(mload(0x37a0), mload(0x6a0), f_q))
            mstore(0x37e0, mulmod(mload(0x37c0), mload(0xfa0), f_q))
            mstore(0x3800, mulmod(mload(0x3400), mload(0x37e0), f_q))
            mstore(0x3820, addmod(mload(0x3760), sub(f_q, mload(0x3800)), f_q))
            mstore(0x3840, mulmod(mload(0x3820), mload(0x2980), f_q))
            mstore(0x3860, addmod(mload(0x36e0), mload(0x3840), f_q))
            mstore(0x3880, mulmod(mload(0x960), mload(0x3860), f_q))
            mstore(0x38a0, addmod(mload(0xfe0), sub(f_q, mload(0x1020)), f_q))
            mstore(0x38c0, mulmod(mload(0x38a0), mload(0x2280), f_q))
            mstore(0x38e0, addmod(mload(0x3880), mload(0x38c0), f_q))
            mstore(0x3900, mulmod(mload(0x960), mload(0x38e0), f_q))
            mstore(0x3920, mulmod(mload(0x38a0), mload(0x2980), f_q))
            mstore(0x3940, addmod(mload(0xfe0), sub(f_q, mload(0x1000)), f_q))
            mstore(0x3960, mulmod(mload(0x3940), mload(0x3920), f_q))
            mstore(0x3980, addmod(mload(0x3900), mload(0x3960), f_q))
            mstore(0x39a0, mulmod(mload(0x960), mload(0x3980), f_q))
            mstore(0x39c0, addmod(1, sub(f_q, mload(0x1040)), f_q))
            mstore(0x39e0, mulmod(mload(0x39c0), mload(0x2280), f_q))
            mstore(0x3a00, addmod(mload(0x39a0), mload(0x39e0), f_q))
            mstore(0x3a20, mulmod(mload(0x960), mload(0x3a00), f_q))
            mstore(0x3a40, mulmod(mload(0x1040), mload(0x1040), f_q))
            mstore(0x3a60, addmod(mload(0x3a40), sub(f_q, mload(0x1040)), f_q))
            mstore(0x3a80, mulmod(mload(0x3a60), mload(0x21c0), f_q))
            mstore(0x3aa0, addmod(mload(0x3a20), mload(0x3a80), f_q))
            mstore(0x3ac0, mulmod(mload(0x960), mload(0x3aa0), f_q))
            mstore(0x3ae0, addmod(mload(0x1080), mload(0x6a0), f_q))
            mstore(0x3b00, mulmod(mload(0x3ae0), mload(0x1060), f_q))
            mstore(0x3b20, addmod(mload(0x10c0), mload(0x700), f_q))
            mstore(0x3b40, mulmod(mload(0x3b20), mload(0x3b00), f_q))
            mstore(0x3b60, mulmod(mload(0xb40), mload(0xd40), f_q))
            mstore(0x3b80, addmod(mload(0x3320), mload(0x3b60), f_q))
            mstore(0x3ba0, addmod(mload(0x3b80), mload(0x6a0), f_q))
            mstore(0x3bc0, mulmod(mload(0x3ba0), mload(0x1040), f_q))
            mstore(0x3be0, mulmod(mload(0x3400), mload(0x3bc0), f_q))
            mstore(0x3c00, addmod(mload(0x3b40), sub(f_q, mload(0x3be0)), f_q))
            mstore(0x3c20, mulmod(mload(0x3c00), mload(0x2980), f_q))
            mstore(0x3c40, addmod(mload(0x3ac0), mload(0x3c20), f_q))
            mstore(0x3c60, mulmod(mload(0x960), mload(0x3c40), f_q))
            mstore(0x3c80, addmod(mload(0x1080), sub(f_q, mload(0x10c0)), f_q))
            mstore(0x3ca0, mulmod(mload(0x3c80), mload(0x2280), f_q))
            mstore(0x3cc0, addmod(mload(0x3c60), mload(0x3ca0), f_q))
            mstore(0x3ce0, mulmod(mload(0x960), mload(0x3cc0), f_q))
            mstore(0x3d00, mulmod(mload(0x3c80), mload(0x2980), f_q))
            mstore(0x3d20, addmod(mload(0x1080), sub(f_q, mload(0x10a0)), f_q))
            mstore(0x3d40, mulmod(mload(0x3d20), mload(0x3d00), f_q))
            mstore(0x3d60, addmod(mload(0x3ce0), mload(0x3d40), f_q))
            mstore(0x3d80, mulmod(mload(0x960), mload(0x3d60), f_q))
            mstore(0x3da0, addmod(1, sub(f_q, mload(0x10e0)), f_q))
            mstore(0x3dc0, mulmod(mload(0x3da0), mload(0x2280), f_q))
            mstore(0x3de0, addmod(mload(0x3d80), mload(0x3dc0), f_q))
            mstore(0x3e00, mulmod(mload(0x960), mload(0x3de0), f_q))
            mstore(0x3e20, mulmod(mload(0x10e0), mload(0x10e0), f_q))
            mstore(0x3e40, addmod(mload(0x3e20), sub(f_q, mload(0x10e0)), f_q))
            mstore(0x3e60, mulmod(mload(0x3e40), mload(0x21c0), f_q))
            mstore(0x3e80, addmod(mload(0x3e00), mload(0x3e60), f_q))
            mstore(0x3ea0, mulmod(mload(0x960), mload(0x3e80), f_q))
            mstore(0x3ec0, addmod(mload(0x1120), mload(0x6a0), f_q))
            mstore(0x3ee0, mulmod(mload(0x3ec0), mload(0x1100), f_q))
            mstore(0x3f00, addmod(mload(0x1160), mload(0x700), f_q))
            mstore(0x3f20, mulmod(mload(0x3f00), mload(0x3ee0), f_q))
            mstore(0x3f40, mulmod(mload(0xb60), mload(0xd40), f_q))
            mstore(0x3f60, addmod(mload(0x3320), mload(0x3f40), f_q))
            mstore(0x3f80, addmod(mload(0x3f60), mload(0x6a0), f_q))
            mstore(0x3fa0, mulmod(mload(0x3f80), mload(0x10e0), f_q))
            mstore(0x3fc0, mulmod(mload(0x3400), mload(0x3fa0), f_q))
            mstore(0x3fe0, addmod(mload(0x3f20), sub(f_q, mload(0x3fc0)), f_q))
            mstore(0x4000, mulmod(mload(0x3fe0), mload(0x2980), f_q))
            mstore(0x4020, addmod(mload(0x3ea0), mload(0x4000), f_q))
            mstore(0x4040, mulmod(mload(0x960), mload(0x4020), f_q))
            mstore(0x4060, addmod(mload(0x1120), sub(f_q, mload(0x1160)), f_q))
            mstore(0x4080, mulmod(mload(0x4060), mload(0x2280), f_q))
            mstore(0x40a0, addmod(mload(0x4040), mload(0x4080), f_q))
            mstore(0x40c0, mulmod(mload(0x960), mload(0x40a0), f_q))
            mstore(0x40e0, mulmod(mload(0x4060), mload(0x2980), f_q))
            mstore(0x4100, addmod(mload(0x1120), sub(f_q, mload(0x1140)), f_q))
            mstore(0x4120, mulmod(mload(0x4100), mload(0x40e0), f_q))
            mstore(0x4140, addmod(mload(0x40c0), mload(0x4120), f_q))
            mstore(0x4160, mulmod(mload(0x960), mload(0x4140), f_q))
            mstore(0x4180, addmod(1, sub(f_q, mload(0x1180)), f_q))
            mstore(0x41a0, mulmod(mload(0x4180), mload(0x2280), f_q))
            mstore(0x41c0, addmod(mload(0x4160), mload(0x41a0), f_q))
            mstore(0x41e0, mulmod(mload(0x960), mload(0x41c0), f_q))
            mstore(0x4200, mulmod(mload(0x1180), mload(0x1180), f_q))
            mstore(0x4220, addmod(mload(0x4200), sub(f_q, mload(0x1180)), f_q))
            mstore(0x4240, mulmod(mload(0x4220), mload(0x21c0), f_q))
            mstore(0x4260, addmod(mload(0x41e0), mload(0x4240), f_q))
            mstore(0x4280, mulmod(mload(0x960), mload(0x4260), f_q))
            mstore(0x42a0, addmod(mload(0x11c0), mload(0x6a0), f_q))
            mstore(0x42c0, mulmod(mload(0x42a0), mload(0x11a0), f_q))
            mstore(0x42e0, addmod(mload(0x1200), mload(0x700), f_q))
            mstore(0x4300, mulmod(mload(0x42e0), mload(0x42c0), f_q))
            mstore(0x4320, mulmod(mload(0x3c0), mload(0xd20), f_q))
            mstore(0x4340, mulmod(mload(0xb00), mload(0xd60), f_q))
            mstore(0x4360, addmod(mload(0x4320), mload(0x4340), f_q))
            mstore(0x4380, addmod(mload(0x4360), mload(0x6a0), f_q))
            mstore(0x43a0, mulmod(mload(0x4380), mload(0x1180), f_q))
            mstore(0x43c0, mulmod(mload(0x3400), mload(0x43a0), f_q))
            mstore(0x43e0, addmod(mload(0x4300), sub(f_q, mload(0x43c0)), f_q))
            mstore(0x4400, mulmod(mload(0x43e0), mload(0x2980), f_q))
            mstore(0x4420, addmod(mload(0x4280), mload(0x4400), f_q))
            mstore(0x4440, mulmod(mload(0x960), mload(0x4420), f_q))
            mstore(0x4460, addmod(mload(0x11c0), sub(f_q, mload(0x1200)), f_q))
            mstore(0x4480, mulmod(mload(0x4460), mload(0x2280), f_q))
            mstore(0x44a0, addmod(mload(0x4440), mload(0x4480), f_q))
            mstore(0x44c0, mulmod(mload(0x960), mload(0x44a0), f_q))
            mstore(0x44e0, mulmod(mload(0x4460), mload(0x2980), f_q))
            mstore(0x4500, addmod(mload(0x11c0), sub(f_q, mload(0x11e0)), f_q))
            mstore(0x4520, mulmod(mload(0x4500), mload(0x44e0), f_q))
            mstore(0x4540, addmod(mload(0x44c0), mload(0x4520), f_q))
            mstore(0x4560, mulmod(mload(0x1780), mload(0x1780), f_q))
            mstore(0x4580, mulmod(mload(0x4560), mload(0x1780), f_q))
            mstore(0x45a0, mulmod(mload(0x4580), mload(0x1780), f_q))
            mstore(0x45c0, mulmod(1, mload(0x1780), f_q))
            mstore(0x45e0, mulmod(1, mload(0x4560), f_q))
            mstore(0x4600, mulmod(1, mload(0x4580), f_q))
            mstore(0x4620, mulmod(mload(0x4540), mload(0x17a0), f_q))
            mstore(0x4640, mulmod(mload(0x13a0), mload(0x13a0), f_q))
            mstore(0x4660, mulmod(mload(0x4640), mload(0x13a0), f_q))
            mstore(0x4680, mulmod(mload(0x4660), mload(0x13a0), f_q))
            mstore(0x46a0, mulmod(mload(0x1240), mload(0x1240), f_q))
            mstore(0x46c0, mulmod(mload(0x46a0), mload(0x1240), f_q))
            mstore(0x46e0, mulmod(mload(0x46c0), mload(0x1240), f_q))
            mstore(0x4700, mulmod(mload(0x46e0), mload(0x1240), f_q))
            mstore(0x4720, mulmod(mload(0x4700), mload(0x1240), f_q))
            mstore(0x4740, mulmod(mload(0x4720), mload(0x1240), f_q))
            mstore(0x4760, mulmod(mload(0x4740), mload(0x1240), f_q))
            mstore(0x4780, mulmod(mload(0x4760), mload(0x1240), f_q))
            mstore(0x47a0, mulmod(mload(0x4780), mload(0x1240), f_q))
            mstore(0x47c0, mulmod(mload(0x47a0), mload(0x1240), f_q))
            mstore(0x47e0, mulmod(mload(0x47c0), mload(0x1240), f_q))
            mstore(0x4800, mulmod(mload(0x47e0), mload(0x1240), f_q))
            mstore(0x4820, mulmod(mload(0x4800), mload(0x1240), f_q))
            mstore(0x4840, mulmod(mload(0x4820), mload(0x1240), f_q))
            mstore(0x4860, mulmod(mload(0x4840), mload(0x1240), f_q))
            mstore(0x4880, mulmod(mload(0x4860), mload(0x1240), f_q))
            mstore(0x48a0, mulmod(mload(0x4880), mload(0x1240), f_q))
            mstore(0x48c0, mulmod(mload(0x48a0), mload(0x1240), f_q))
            mstore(0x48e0, mulmod(mload(0x48c0), mload(0x1240), f_q))
            mstore(0x4900, mulmod(mload(0x48e0), mload(0x1240), f_q))
            mstore(0x4920, mulmod(mload(0x4900), mload(0x1240), f_q))
            mstore(0x4940, mulmod(mload(0x4920), mload(0x1240), f_q))
            mstore(0x4960, mulmod(mload(0x4940), mload(0x1240), f_q))
            mstore(0x4980, mulmod(mload(0x4960), mload(0x1240), f_q))
            mstore(0x49a0, mulmod(mload(0x4980), mload(0x1240), f_q))
            mstore(0x49c0, mulmod(mload(0x49a0), mload(0x1240), f_q))
            mstore(0x49e0, mulmod(mload(0x49c0), mload(0x1240), f_q))
            mstore(0x4a00, mulmod(mload(0x49e0), mload(0x1240), f_q))
            mstore(0x4a20, mulmod(mload(0x4a00), mload(0x1240), f_q))
            mstore(0x4a40, mulmod(mload(0x4a20), mload(0x1240), f_q))
            mstore(0x4a60, mulmod(mload(0x4a40), mload(0x1240), f_q))
            mstore(0x4a80, mulmod(mload(0x4a60), mload(0x1240), f_q))
            mstore(0x4aa0, mulmod(mload(0x4a80), mload(0x1240), f_q))
            mstore(0x4ac0, mulmod(mload(0x4aa0), mload(0x1240), f_q))
            mstore(0x4ae0, mulmod(mload(0x4ac0), mload(0x1240), f_q))
            mstore(0x4b00, mulmod(mload(0x4ae0), mload(0x1240), f_q))
            mstore(0x4b20, mulmod(mload(0x4b00), mload(0x1240), f_q))
            mstore(0x4b40, mulmod(mload(0x4b20), mload(0x1240), f_q))
            mstore(0x4b60, mulmod(mload(0x4b40), mload(0x1240), f_q))
            mstore(0x4b80, mulmod(mload(0x4b60), mload(0x1240), f_q))
            mstore(0x4ba0, mulmod(mload(0x4b80), mload(0x1240), f_q))
            mstore(0x4bc0, mulmod(mload(0x4ba0), mload(0x1240), f_q))
            mstore(0x4be0, mulmod(mload(0x4bc0), mload(0x1240), f_q))
            mstore(0x4c00, mulmod(sub(f_q, mload(0xb00)), 1, f_q))
            mstore(0x4c20, mulmod(sub(f_q, mload(0xb20)), mload(0x1240), f_q))
            mstore(0x4c40, mulmod(1, mload(0x1240), f_q))
            mstore(0x4c60, addmod(mload(0x4c00), mload(0x4c20), f_q))
            mstore(0x4c80, mulmod(sub(f_q, mload(0xb40)), mload(0x46a0), f_q))
            mstore(0x4ca0, mulmod(1, mload(0x46a0), f_q))
            mstore(0x4cc0, addmod(mload(0x4c60), mload(0x4c80), f_q))
            mstore(0x4ce0, mulmod(sub(f_q, mload(0xb60)), mload(0x46c0), f_q))
            mstore(0x4d00, mulmod(1, mload(0x46c0), f_q))
            mstore(0x4d20, addmod(mload(0x4cc0), mload(0x4ce0), f_q))
            mstore(0x4d40, mulmod(sub(f_q, mload(0xb80)), mload(0x46e0), f_q))
            mstore(0x4d60, mulmod(1, mload(0x46e0), f_q))
            mstore(0x4d80, addmod(mload(0x4d20), mload(0x4d40), f_q))
            mstore(0x4da0, mulmod(sub(f_q, mload(0xe60)), mload(0x4700), f_q))
            mstore(0x4dc0, mulmod(1, mload(0x4700), f_q))
            mstore(0x4de0, addmod(mload(0x4d80), mload(0x4da0), f_q))
            mstore(0x4e00, mulmod(sub(f_q, mload(0xec0)), mload(0x4720), f_q))
            mstore(0x4e20, mulmod(1, mload(0x4720), f_q))
            mstore(0x4e40, addmod(mload(0x4de0), mload(0x4e00), f_q))
            mstore(0x4e60, mulmod(sub(f_q, mload(0xf00)), mload(0x4740), f_q))
            mstore(0x4e80, mulmod(1, mload(0x4740), f_q))
            mstore(0x4ea0, addmod(mload(0x4e40), mload(0x4e60), f_q))
            mstore(0x4ec0, mulmod(sub(f_q, mload(0xf40)), mload(0x4760), f_q))
            mstore(0x4ee0, mulmod(1, mload(0x4760), f_q))
            mstore(0x4f00, addmod(mload(0x4ea0), mload(0x4ec0), f_q))
            mstore(0x4f20, mulmod(sub(f_q, mload(0xf80)), mload(0x4780), f_q))
            mstore(0x4f40, mulmod(1, mload(0x4780), f_q))
            mstore(0x4f60, addmod(mload(0x4f00), mload(0x4f20), f_q))
            mstore(0x4f80, mulmod(sub(f_q, mload(0xfa0)), mload(0x47a0), f_q))
            mstore(0x4fa0, mulmod(1, mload(0x47a0), f_q))
            mstore(0x4fc0, addmod(mload(0x4f60), mload(0x4f80), f_q))
            mstore(0x4fe0, mulmod(sub(f_q, mload(0xfe0)), mload(0x47c0), f_q))
            mstore(0x5000, mulmod(1, mload(0x47c0), f_q))
            mstore(0x5020, addmod(mload(0x4fc0), mload(0x4fe0), f_q))
            mstore(0x5040, mulmod(sub(f_q, mload(0x1020)), mload(0x47e0), f_q))
            mstore(0x5060, mulmod(1, mload(0x47e0), f_q))
            mstore(0x5080, addmod(mload(0x5020), mload(0x5040), f_q))
            mstore(0x50a0, mulmod(sub(f_q, mload(0x1040)), mload(0x4800), f_q))
            mstore(0x50c0, mulmod(1, mload(0x4800), f_q))
            mstore(0x50e0, addmod(mload(0x5080), mload(0x50a0), f_q))
            mstore(0x5100, mulmod(sub(f_q, mload(0x1080)), mload(0x4820), f_q))
            mstore(0x5120, mulmod(1, mload(0x4820), f_q))
            mstore(0x5140, addmod(mload(0x50e0), mload(0x5100), f_q))
            mstore(0x5160, mulmod(sub(f_q, mload(0x10c0)), mload(0x4840), f_q))
            mstore(0x5180, mulmod(1, mload(0x4840), f_q))
            mstore(0x51a0, addmod(mload(0x5140), mload(0x5160), f_q))
            mstore(0x51c0, mulmod(sub(f_q, mload(0x10e0)), mload(0x4860), f_q))
            mstore(0x51e0, mulmod(1, mload(0x4860), f_q))
            mstore(0x5200, addmod(mload(0x51a0), mload(0x51c0), f_q))
            mstore(0x5220, mulmod(sub(f_q, mload(0x1120)), mload(0x4880), f_q))
            mstore(0x5240, mulmod(1, mload(0x4880), f_q))
            mstore(0x5260, addmod(mload(0x5200), mload(0x5220), f_q))
            mstore(0x5280, mulmod(sub(f_q, mload(0x1160)), mload(0x48a0), f_q))
            mstore(0x52a0, mulmod(1, mload(0x48a0), f_q))
            mstore(0x52c0, addmod(mload(0x5260), mload(0x5280), f_q))
            mstore(0x52e0, mulmod(sub(f_q, mload(0x1180)), mload(0x48c0), f_q))
            mstore(0x5300, mulmod(1, mload(0x48c0), f_q))
            mstore(0x5320, addmod(mload(0x52c0), mload(0x52e0), f_q))
            mstore(0x5340, mulmod(sub(f_q, mload(0x11c0)), mload(0x48e0), f_q))
            mstore(0x5360, mulmod(1, mload(0x48e0), f_q))
            mstore(0x5380, addmod(mload(0x5320), mload(0x5340), f_q))
            mstore(0x53a0, mulmod(sub(f_q, mload(0x1200)), mload(0x4900), f_q))
            mstore(0x53c0, mulmod(1, mload(0x4900), f_q))
            mstore(0x53e0, addmod(mload(0x5380), mload(0x53a0), f_q))
            mstore(0x5400, mulmod(sub(f_q, mload(0xbc0)), mload(0x4920), f_q))
            mstore(0x5420, mulmod(1, mload(0x4920), f_q))
            mstore(0x5440, addmod(mload(0x53e0), mload(0x5400), f_q))
            mstore(0x5460, mulmod(sub(f_q, mload(0xbe0)), mload(0x4940), f_q))
            mstore(0x5480, mulmod(1, mload(0x4940), f_q))
            mstore(0x54a0, addmod(mload(0x5440), mload(0x5460), f_q))
            mstore(0x54c0, mulmod(sub(f_q, mload(0xc00)), mload(0x4960), f_q))
            mstore(0x54e0, mulmod(1, mload(0x4960), f_q))
            mstore(0x5500, addmod(mload(0x54a0), mload(0x54c0), f_q))
            mstore(0x5520, mulmod(sub(f_q, mload(0xc20)), mload(0x4980), f_q))
            mstore(0x5540, mulmod(1, mload(0x4980), f_q))
            mstore(0x5560, addmod(mload(0x5500), mload(0x5520), f_q))
            mstore(0x5580, mulmod(sub(f_q, mload(0xc40)), mload(0x49a0), f_q))
            mstore(0x55a0, mulmod(1, mload(0x49a0), f_q))
            mstore(0x55c0, addmod(mload(0x5560), mload(0x5580), f_q))
            mstore(0x55e0, mulmod(sub(f_q, mload(0xc60)), mload(0x49c0), f_q))
            mstore(0x5600, mulmod(1, mload(0x49c0), f_q))
            mstore(0x5620, addmod(mload(0x55c0), mload(0x55e0), f_q))
            mstore(0x5640, mulmod(sub(f_q, mload(0xc80)), mload(0x49e0), f_q))
            mstore(0x5660, mulmod(1, mload(0x49e0), f_q))
            mstore(0x5680, addmod(mload(0x5620), mload(0x5640), f_q))
            mstore(0x56a0, mulmod(sub(f_q, mload(0xca0)), mload(0x4a00), f_q))
            mstore(0x56c0, mulmod(1, mload(0x4a00), f_q))
            mstore(0x56e0, addmod(mload(0x5680), mload(0x56a0), f_q))
            mstore(0x5700, mulmod(sub(f_q, mload(0xcc0)), mload(0x4a20), f_q))
            mstore(0x5720, mulmod(1, mload(0x4a20), f_q))
            mstore(0x5740, addmod(mload(0x56e0), mload(0x5700), f_q))
            mstore(0x5760, mulmod(sub(f_q, mload(0xce0)), mload(0x4a40), f_q))
            mstore(0x5780, mulmod(1, mload(0x4a40), f_q))
            mstore(0x57a0, addmod(mload(0x5740), mload(0x5760), f_q))
            mstore(0x57c0, mulmod(sub(f_q, mload(0xd00)), mload(0x4a60), f_q))
            mstore(0x57e0, mulmod(1, mload(0x4a60), f_q))
            mstore(0x5800, addmod(mload(0x57a0), mload(0x57c0), f_q))
            mstore(0x5820, mulmod(sub(f_q, mload(0xd20)), mload(0x4a80), f_q))
            mstore(0x5840, mulmod(1, mload(0x4a80), f_q))
            mstore(0x5860, addmod(mload(0x5800), mload(0x5820), f_q))
            mstore(0x5880, mulmod(sub(f_q, mload(0xd40)), mload(0x4aa0), f_q))
            mstore(0x58a0, mulmod(1, mload(0x4aa0), f_q))
            mstore(0x58c0, addmod(mload(0x5860), mload(0x5880), f_q))
            mstore(0x58e0, mulmod(sub(f_q, mload(0xd60)), mload(0x4ac0), f_q))
            mstore(0x5900, mulmod(1, mload(0x4ac0), f_q))
            mstore(0x5920, addmod(mload(0x58c0), mload(0x58e0), f_q))
            mstore(0x5940, mulmod(sub(f_q, mload(0xda0)), mload(0x4ae0), f_q))
            mstore(0x5960, mulmod(1, mload(0x4ae0), f_q))
            mstore(0x5980, addmod(mload(0x5920), mload(0x5940), f_q))
            mstore(0x59a0, mulmod(sub(f_q, mload(0xdc0)), mload(0x4b00), f_q))
            mstore(0x59c0, mulmod(1, mload(0x4b00), f_q))
            mstore(0x59e0, addmod(mload(0x5980), mload(0x59a0), f_q))
            mstore(0x5a00, mulmod(sub(f_q, mload(0xde0)), mload(0x4b20), f_q))
            mstore(0x5a20, mulmod(1, mload(0x4b20), f_q))
            mstore(0x5a40, addmod(mload(0x59e0), mload(0x5a00), f_q))
            mstore(0x5a60, mulmod(sub(f_q, mload(0xe00)), mload(0x4b40), f_q))
            mstore(0x5a80, mulmod(1, mload(0x4b40), f_q))
            mstore(0x5aa0, addmod(mload(0x5a40), mload(0x5a60), f_q))
            mstore(0x5ac0, mulmod(sub(f_q, mload(0xe20)), mload(0x4b60), f_q))
            mstore(0x5ae0, mulmod(1, mload(0x4b60), f_q))
            mstore(0x5b00, addmod(mload(0x5aa0), mload(0x5ac0), f_q))
            mstore(0x5b20, mulmod(sub(f_q, mload(0xe40)), mload(0x4b80), f_q))
            mstore(0x5b40, mulmod(1, mload(0x4b80), f_q))
            mstore(0x5b60, addmod(mload(0x5b00), mload(0x5b20), f_q))
            mstore(0x5b80, mulmod(sub(f_q, mload(0x4620)), mload(0x4ba0), f_q))
            mstore(0x5ba0, mulmod(1, mload(0x4ba0), f_q))
            mstore(0x5bc0, mulmod(mload(0x45c0), mload(0x4ba0), f_q))
            mstore(0x5be0, mulmod(mload(0x45e0), mload(0x4ba0), f_q))
            mstore(0x5c00, mulmod(mload(0x4600), mload(0x4ba0), f_q))
            mstore(0x5c20, addmod(mload(0x5b60), mload(0x5b80), f_q))
            mstore(0x5c40, mulmod(sub(f_q, mload(0xd80)), mload(0x4bc0), f_q))
            mstore(0x5c60, mulmod(1, mload(0x4bc0), f_q))
            mstore(0x5c80, addmod(mload(0x5c20), mload(0x5c40), f_q))
            mstore(0x5ca0, mulmod(mload(0x5c80), 1, f_q))
            mstore(0x5cc0, mulmod(mload(0x4c40), 1, f_q))
            mstore(0x5ce0, mulmod(mload(0x4ca0), 1, f_q))
            mstore(0x5d00, mulmod(mload(0x4d00), 1, f_q))
            mstore(0x5d20, mulmod(mload(0x4d60), 1, f_q))
            mstore(0x5d40, mulmod(mload(0x4dc0), 1, f_q))
            mstore(0x5d60, mulmod(mload(0x4e20), 1, f_q))
            mstore(0x5d80, mulmod(mload(0x4e80), 1, f_q))
            mstore(0x5da0, mulmod(mload(0x4ee0), 1, f_q))
            mstore(0x5dc0, mulmod(mload(0x4f40), 1, f_q))
            mstore(0x5de0, mulmod(mload(0x4fa0), 1, f_q))
            mstore(0x5e00, mulmod(mload(0x5000), 1, f_q))
            mstore(0x5e20, mulmod(mload(0x5060), 1, f_q))
            mstore(0x5e40, mulmod(mload(0x50c0), 1, f_q))
            mstore(0x5e60, mulmod(mload(0x5120), 1, f_q))
            mstore(0x5e80, mulmod(mload(0x5180), 1, f_q))
            mstore(0x5ea0, mulmod(mload(0x51e0), 1, f_q))
            mstore(0x5ec0, mulmod(mload(0x5240), 1, f_q))
            mstore(0x5ee0, mulmod(mload(0x52a0), 1, f_q))
            mstore(0x5f00, mulmod(mload(0x5300), 1, f_q))
            mstore(0x5f20, mulmod(mload(0x5360), 1, f_q))
            mstore(0x5f40, mulmod(mload(0x53c0), 1, f_q))
            mstore(0x5f60, mulmod(mload(0x5420), 1, f_q))
            mstore(0x5f80, mulmod(mload(0x5480), 1, f_q))
            mstore(0x5fa0, mulmod(mload(0x54e0), 1, f_q))
            mstore(0x5fc0, mulmod(mload(0x5540), 1, f_q))
            mstore(0x5fe0, mulmod(mload(0x55a0), 1, f_q))
            mstore(0x6000, mulmod(mload(0x5600), 1, f_q))
            mstore(0x6020, mulmod(mload(0x5660), 1, f_q))
            mstore(0x6040, mulmod(mload(0x56c0), 1, f_q))
            mstore(0x6060, mulmod(mload(0x5720), 1, f_q))
            mstore(0x6080, mulmod(mload(0x5780), 1, f_q))
            mstore(0x60a0, mulmod(mload(0x57e0), 1, f_q))
            mstore(0x60c0, mulmod(mload(0x5840), 1, f_q))
            mstore(0x60e0, mulmod(mload(0x58a0), 1, f_q))
            mstore(0x6100, mulmod(mload(0x5900), 1, f_q))
            mstore(0x6120, mulmod(mload(0x5960), 1, f_q))
            mstore(0x6140, mulmod(mload(0x59c0), 1, f_q))
            mstore(0x6160, mulmod(mload(0x5a20), 1, f_q))
            mstore(0x6180, mulmod(mload(0x5a80), 1, f_q))
            mstore(0x61a0, mulmod(mload(0x5ae0), 1, f_q))
            mstore(0x61c0, mulmod(mload(0x5b40), 1, f_q))
            mstore(0x61e0, mulmod(mload(0x5ba0), 1, f_q))
            mstore(0x6200, mulmod(mload(0x5bc0), 1, f_q))
            mstore(0x6220, mulmod(mload(0x5be0), 1, f_q))
            mstore(0x6240, mulmod(mload(0x5c00), 1, f_q))
            mstore(0x6260, mulmod(mload(0x5c60), 1, f_q))
            mstore(0x6280, mulmod(sub(f_q, mload(0xba0)), 1, f_q))
            mstore(0x62a0, mulmod(sub(f_q, mload(0xe80)), mload(0x1240), f_q))
            mstore(0x62c0, addmod(mload(0x6280), mload(0x62a0), f_q))
            mstore(0x62e0, mulmod(sub(f_q, mload(0xee0)), mload(0x46a0), f_q))
            mstore(0x6300, addmod(mload(0x62c0), mload(0x62e0), f_q))
            mstore(0x6320, mulmod(sub(f_q, mload(0xf20)), mload(0x46c0), f_q))
            mstore(0x6340, addmod(mload(0x6300), mload(0x6320), f_q))
            mstore(0x6360, mulmod(sub(f_q, mload(0xfc0)), mload(0x46e0), f_q))
            mstore(0x6380, addmod(mload(0x6340), mload(0x6360), f_q))
            mstore(0x63a0, mulmod(sub(f_q, mload(0x1060)), mload(0x4700), f_q))
            mstore(0x63c0, addmod(mload(0x6380), mload(0x63a0), f_q))
            mstore(0x63e0, mulmod(sub(f_q, mload(0x1100)), mload(0x4720), f_q))
            mstore(0x6400, addmod(mload(0x63c0), mload(0x63e0), f_q))
            mstore(0x6420, mulmod(sub(f_q, mload(0x11a0)), mload(0x4740), f_q))
            mstore(0x6440, addmod(mload(0x6400), mload(0x6420), f_q))
            mstore(0x6460, mulmod(mload(0x6440), mload(0x13a0), f_q))
            mstore(0x6480, mulmod(1, mload(0x13a0), f_q))
            mstore(0x64a0, mulmod(mload(0x4c40), mload(0x13a0), f_q))
            mstore(0x64c0, mulmod(mload(0x4ca0), mload(0x13a0), f_q))
            mstore(0x64e0, mulmod(mload(0x4d00), mload(0x13a0), f_q))
            mstore(0x6500, mulmod(mload(0x4d60), mload(0x13a0), f_q))
            mstore(0x6520, mulmod(mload(0x4dc0), mload(0x13a0), f_q))
            mstore(0x6540, mulmod(mload(0x4e20), mload(0x13a0), f_q))
            mstore(0x6560, mulmod(mload(0x4e80), mload(0x13a0), f_q))
            mstore(0x6580, addmod(mload(0x5ca0), mload(0x6460), f_q))
            mstore(0x65a0, addmod(mload(0x5d20), mload(0x6480), f_q))
            mstore(0x65c0, addmod(mload(0x5d40), mload(0x64a0), f_q))
            mstore(0x65e0, addmod(mload(0x5d60), mload(0x64c0), f_q))
            mstore(0x6600, addmod(mload(0x5d80), mload(0x64e0), f_q))
            mstore(0x6620, addmod(mload(0x5de0), mload(0x6500), f_q))
            mstore(0x6640, addmod(mload(0x5e40), mload(0x6520), f_q))
            mstore(0x6660, addmod(mload(0x5ea0), mload(0x6540), f_q))
            mstore(0x6680, addmod(mload(0x5f00), mload(0x6560), f_q))
            mstore(0x66a0, mulmod(sub(f_q, mload(0xea0)), 1, f_q))
            mstore(0x66c0, mulmod(mload(0x66a0), mload(0x4640), f_q))
            mstore(0x66e0, mulmod(1, mload(0x4640), f_q))
            mstore(0x6700, addmod(mload(0x6580), mload(0x66c0), f_q))
            mstore(0x6720, addmod(mload(0x65c0), mload(0x66e0), f_q))
            mstore(0x6740, mulmod(sub(f_q, mload(0xf60)), 1, f_q))
            mstore(0x6760, mulmod(sub(f_q, mload(0x1000)), mload(0x1240), f_q))
            mstore(0x6780, addmod(mload(0x6740), mload(0x6760), f_q))
            mstore(0x67a0, mulmod(sub(f_q, mload(0x10a0)), mload(0x46a0), f_q))
            mstore(0x67c0, addmod(mload(0x6780), mload(0x67a0), f_q))
            mstore(0x67e0, mulmod(sub(f_q, mload(0x1140)), mload(0x46c0), f_q))
            mstore(0x6800, addmod(mload(0x67c0), mload(0x67e0), f_q))
            mstore(0x6820, mulmod(sub(f_q, mload(0x11e0)), mload(0x46e0), f_q))
            mstore(0x6840, addmod(mload(0x6800), mload(0x6820), f_q))
            mstore(0x6860, mulmod(mload(0x6840), mload(0x4660), f_q))
            mstore(0x6880, mulmod(1, mload(0x4660), f_q))
            mstore(0x68a0, mulmod(mload(0x4c40), mload(0x4660), f_q))
            mstore(0x68c0, mulmod(mload(0x4ca0), mload(0x4660), f_q))
            mstore(0x68e0, mulmod(mload(0x4d00), mload(0x4660), f_q))
            mstore(0x6900, mulmod(mload(0x4d60), mload(0x4660), f_q))
            mstore(0x6920, addmod(mload(0x6700), mload(0x6860), f_q))
            mstore(0x6940, addmod(mload(0x5da0), mload(0x6880), f_q))
            mstore(0x6960, addmod(mload(0x5e00), mload(0x68a0), f_q))
            mstore(0x6980, addmod(mload(0x5e60), mload(0x68c0), f_q))
            mstore(0x69a0, addmod(mload(0x5ec0), mload(0x68e0), f_q))
            mstore(0x69c0, addmod(mload(0x5f20), mload(0x6900), f_q))
            mstore(0x69e0, mulmod(1, mload(0xac0), f_q))
            mstore(0x6a00, mulmod(1, mload(0x69e0), f_q))
            mstore(0x6a20, mulmod(13446667982376394161563610564587413125564757801019538732601045199901075958935, mload(0xac0), f_q))
            mstore(0x6a40, mulmod(mload(0x6480), mload(0x6a20), f_q))
            mstore(0x6a60, mulmod(16569469942529664681363945218228869388192121720036659574609237682362097667612, mload(0xac0), f_q))
            mstore(0x6a80, mulmod(mload(0x66e0), mload(0x6a60), f_q))
            mstore(0x6aa0, mulmod(14803907026430593724305438564799066516271154714737734572920456128449769927233, mload(0xac0), f_q))
            mstore(0x6ac0, mulmod(mload(0x6880), mload(0x6aa0), f_q))
            mstore(0x6ae0, 0x0000000000000000000000000000000000000000000000000000000000000001)
            mstore(0x6b00, 0x0000000000000000000000000000000000000000000000000000000000000002)
            mstore(0x6b20, mload(0x6920))
            success := and(eq(staticcall(gas(), 0x7, 0x6ae0, 0x60, 0x6ae0, 0x40), 1), success)
            mstore(0x6b40, mload(0x6ae0))
            mstore(0x6b60, mload(0x6b00))
            mstore(0x6b80, mload(0x260))
            mstore(0x6ba0, mload(0x280))
            success := and(eq(staticcall(gas(), 0x6, 0x6b40, 0x80, 0x6b40, 0x40), 1), success)
            mstore(0x6bc0, mload(0x2a0))
            mstore(0x6be0, mload(0x2c0))
            mstore(0x6c00, mload(0x5cc0))
            success := and(eq(staticcall(gas(), 0x7, 0x6bc0, 0x60, 0x6bc0, 0x40), 1), success)
            mstore(0x6c20, mload(0x6b40))
            mstore(0x6c40, mload(0x6b60))
            mstore(0x6c60, mload(0x6bc0))
            mstore(0x6c80, mload(0x6be0))
            success := and(eq(staticcall(gas(), 0x6, 0x6c20, 0x80, 0x6c20, 0x40), 1), success)
            mstore(0x6ca0, mload(0x2e0))
            mstore(0x6cc0, mload(0x300))
            mstore(0x6ce0, mload(0x5ce0))
            success := and(eq(staticcall(gas(), 0x7, 0x6ca0, 0x60, 0x6ca0, 0x40), 1), success)
            mstore(0x6d00, mload(0x6c20))
            mstore(0x6d20, mload(0x6c40))
            mstore(0x6d40, mload(0x6ca0))
            mstore(0x6d60, mload(0x6cc0))
            success := and(eq(staticcall(gas(), 0x6, 0x6d00, 0x80, 0x6d00, 0x40), 1), success)
            mstore(0x6d80, mload(0x320))
            mstore(0x6da0, mload(0x340))
            mstore(0x6dc0, mload(0x5d00))
            success := and(eq(staticcall(gas(), 0x7, 0x6d80, 0x60, 0x6d80, 0x40), 1), success)
            mstore(0x6de0, mload(0x6d00))
            mstore(0x6e00, mload(0x6d20))
            mstore(0x6e20, mload(0x6d80))
            mstore(0x6e40, mload(0x6da0))
            success := and(eq(staticcall(gas(), 0x6, 0x6de0, 0x80, 0x6de0, 0x40), 1), success)
            mstore(0x6e60, mload(0x360))
            mstore(0x6e80, mload(0x380))
            mstore(0x6ea0, mload(0x65a0))
            success := and(eq(staticcall(gas(), 0x7, 0x6e60, 0x60, 0x6e60, 0x40), 1), success)
            mstore(0x6ec0, mload(0x6de0))
            mstore(0x6ee0, mload(0x6e00))
            mstore(0x6f00, mload(0x6e60))
            mstore(0x6f20, mload(0x6e80))
            success := and(eq(staticcall(gas(), 0x6, 0x6ec0, 0x80, 0x6ec0, 0x40), 1), success)
            mstore(0x6f40, mload(0x740))
            mstore(0x6f60, mload(0x760))
            mstore(0x6f80, mload(0x6720))
            success := and(eq(staticcall(gas(), 0x7, 0x6f40, 0x60, 0x6f40, 0x40), 1), success)
            mstore(0x6fa0, mload(0x6ec0))
            mstore(0x6fc0, mload(0x6ee0))
            mstore(0x6fe0, mload(0x6f40))
            mstore(0x7000, mload(0x6f60))
            success := and(eq(staticcall(gas(), 0x6, 0x6fa0, 0x80, 0x6fa0, 0x40), 1), success)
            mstore(0x7020, mload(0x780))
            mstore(0x7040, mload(0x7a0))
            mstore(0x7060, mload(0x65e0))
            success := and(eq(staticcall(gas(), 0x7, 0x7020, 0x60, 0x7020, 0x40), 1), success)
            mstore(0x7080, mload(0x6fa0))
            mstore(0x70a0, mload(0x6fc0))
            mstore(0x70c0, mload(0x7020))
            mstore(0x70e0, mload(0x7040))
            success := and(eq(staticcall(gas(), 0x6, 0x7080, 0x80, 0x7080, 0x40), 1), success)
            mstore(0x7100, mload(0x7c0))
            mstore(0x7120, mload(0x7e0))
            mstore(0x7140, mload(0x6600))
            success := and(eq(staticcall(gas(), 0x7, 0x7100, 0x60, 0x7100, 0x40), 1), success)
            mstore(0x7160, mload(0x7080))
            mstore(0x7180, mload(0x70a0))
            mstore(0x71a0, mload(0x7100))
            mstore(0x71c0, mload(0x7120))
            success := and(eq(staticcall(gas(), 0x6, 0x7160, 0x80, 0x7160, 0x40), 1), success)
            mstore(0x71e0, mload(0x400))
            mstore(0x7200, mload(0x420))
            mstore(0x7220, mload(0x6940))
            success := and(eq(staticcall(gas(), 0x7, 0x71e0, 0x60, 0x71e0, 0x40), 1), success)
            mstore(0x7240, mload(0x7160))
            mstore(0x7260, mload(0x7180))
            mstore(0x7280, mload(0x71e0))
            mstore(0x72a0, mload(0x7200))
            success := and(eq(staticcall(gas(), 0x6, 0x7240, 0x80, 0x7240, 0x40), 1), success)
            mstore(0x72c0, mload(0x440))
            mstore(0x72e0, mload(0x460))
            mstore(0x7300, mload(0x5dc0))
            success := and(eq(staticcall(gas(), 0x7, 0x72c0, 0x60, 0x72c0, 0x40), 1), success)
            mstore(0x7320, mload(0x7240))
            mstore(0x7340, mload(0x7260))
            mstore(0x7360, mload(0x72c0))
            mstore(0x7380, mload(0x72e0))
            success := and(eq(staticcall(gas(), 0x6, 0x7320, 0x80, 0x7320, 0x40), 1), success)
            mstore(0x73a0, mload(0x800))
            mstore(0x73c0, mload(0x820))
            mstore(0x73e0, mload(0x6620))
            success := and(eq(staticcall(gas(), 0x7, 0x73a0, 0x60, 0x73a0, 0x40), 1), success)
            mstore(0x7400, mload(0x7320))
            mstore(0x7420, mload(0x7340))
            mstore(0x7440, mload(0x73a0))
            mstore(0x7460, mload(0x73c0))
            success := and(eq(staticcall(gas(), 0x6, 0x7400, 0x80, 0x7400, 0x40), 1), success)
            mstore(0x7480, mload(0x480))
            mstore(0x74a0, mload(0x4a0))
            mstore(0x74c0, mload(0x6960))
            success := and(eq(staticcall(gas(), 0x7, 0x7480, 0x60, 0x7480, 0x40), 1), success)
            mstore(0x74e0, mload(0x7400))
            mstore(0x7500, mload(0x7420))
            mstore(0x7520, mload(0x7480))
            mstore(0x7540, mload(0x74a0))
            success := and(eq(staticcall(gas(), 0x6, 0x74e0, 0x80, 0x74e0, 0x40), 1), success)
            mstore(0x7560, mload(0x4c0))
            mstore(0x7580, mload(0x4e0))
            mstore(0x75a0, mload(0x5e20))
            success := and(eq(staticcall(gas(), 0x7, 0x7560, 0x60, 0x7560, 0x40), 1), success)
            mstore(0x75c0, mload(0x74e0))
            mstore(0x75e0, mload(0x7500))
            mstore(0x7600, mload(0x7560))
            mstore(0x7620, mload(0x7580))
            success := and(eq(staticcall(gas(), 0x6, 0x75c0, 0x80, 0x75c0, 0x40), 1), success)
            mstore(0x7640, mload(0x840))
            mstore(0x7660, mload(0x860))
            mstore(0x7680, mload(0x6640))
            success := and(eq(staticcall(gas(), 0x7, 0x7640, 0x60, 0x7640, 0x40), 1), success)
            mstore(0x76a0, mload(0x75c0))
            mstore(0x76c0, mload(0x75e0))
            mstore(0x76e0, mload(0x7640))
            mstore(0x7700, mload(0x7660))
            success := and(eq(staticcall(gas(), 0x6, 0x76a0, 0x80, 0x76a0, 0x40), 1), success)
            mstore(0x7720, mload(0x500))
            mstore(0x7740, mload(0x520))
            mstore(0x7760, mload(0x6980))
            success := and(eq(staticcall(gas(), 0x7, 0x7720, 0x60, 0x7720, 0x40), 1), success)
            mstore(0x7780, mload(0x76a0))
            mstore(0x77a0, mload(0x76c0))
            mstore(0x77c0, mload(0x7720))
            mstore(0x77e0, mload(0x7740))
            success := and(eq(staticcall(gas(), 0x6, 0x7780, 0x80, 0x7780, 0x40), 1), success)
            mstore(0x7800, mload(0x540))
            mstore(0x7820, mload(0x560))
            mstore(0x7840, mload(0x5e80))
            success := and(eq(staticcall(gas(), 0x7, 0x7800, 0x60, 0x7800, 0x40), 1), success)
            mstore(0x7860, mload(0x7780))
            mstore(0x7880, mload(0x77a0))
            mstore(0x78a0, mload(0x7800))
            mstore(0x78c0, mload(0x7820))
            success := and(eq(staticcall(gas(), 0x6, 0x7860, 0x80, 0x7860, 0x40), 1), success)
            mstore(0x78e0, mload(0x880))
            mstore(0x7900, mload(0x8a0))
            mstore(0x7920, mload(0x6660))
            success := and(eq(staticcall(gas(), 0x7, 0x78e0, 0x60, 0x78e0, 0x40), 1), success)
            mstore(0x7940, mload(0x7860))
            mstore(0x7960, mload(0x7880))
            mstore(0x7980, mload(0x78e0))
            mstore(0x79a0, mload(0x7900))
            success := and(eq(staticcall(gas(), 0x6, 0x7940, 0x80, 0x7940, 0x40), 1), success)
            mstore(0x79c0, mload(0x580))
            mstore(0x79e0, mload(0x5a0))
            mstore(0x7a00, mload(0x69a0))
            success := and(eq(staticcall(gas(), 0x7, 0x79c0, 0x60, 0x79c0, 0x40), 1), success)
            mstore(0x7a20, mload(0x7940))
            mstore(0x7a40, mload(0x7960))
            mstore(0x7a60, mload(0x79c0))
            mstore(0x7a80, mload(0x79e0))
            success := and(eq(staticcall(gas(), 0x6, 0x7a20, 0x80, 0x7a20, 0x40), 1), success)
            mstore(0x7aa0, mload(0x5c0))
            mstore(0x7ac0, mload(0x5e0))
            mstore(0x7ae0, mload(0x5ee0))
            success := and(eq(staticcall(gas(), 0x7, 0x7aa0, 0x60, 0x7aa0, 0x40), 1), success)
            mstore(0x7b00, mload(0x7a20))
            mstore(0x7b20, mload(0x7a40))
            mstore(0x7b40, mload(0x7aa0))
            mstore(0x7b60, mload(0x7ac0))
            success := and(eq(staticcall(gas(), 0x6, 0x7b00, 0x80, 0x7b00, 0x40), 1), success)
            mstore(0x7b80, mload(0x8c0))
            mstore(0x7ba0, mload(0x8e0))
            mstore(0x7bc0, mload(0x6680))
            success := and(eq(staticcall(gas(), 0x7, 0x7b80, 0x60, 0x7b80, 0x40), 1), success)
            mstore(0x7be0, mload(0x7b00))
            mstore(0x7c00, mload(0x7b20))
            mstore(0x7c20, mload(0x7b80))
            mstore(0x7c40, mload(0x7ba0))
            success := and(eq(staticcall(gas(), 0x6, 0x7be0, 0x80, 0x7be0, 0x40), 1), success)
            mstore(0x7c60, mload(0x600))
            mstore(0x7c80, mload(0x620))
            mstore(0x7ca0, mload(0x69c0))
            success := and(eq(staticcall(gas(), 0x7, 0x7c60, 0x60, 0x7c60, 0x40), 1), success)
            mstore(0x7cc0, mload(0x7be0))
            mstore(0x7ce0, mload(0x7c00))
            mstore(0x7d00, mload(0x7c60))
            mstore(0x7d20, mload(0x7c80))
            success := and(eq(staticcall(gas(), 0x6, 0x7cc0, 0x80, 0x7cc0, 0x40), 1), success)
            mstore(0x7d40, mload(0x640))
            mstore(0x7d60, mload(0x660))
            mstore(0x7d80, mload(0x5f40))
            success := and(eq(staticcall(gas(), 0x7, 0x7d40, 0x60, 0x7d40, 0x40), 1), success)
            mstore(0x7da0, mload(0x7cc0))
            mstore(0x7dc0, mload(0x7ce0))
            mstore(0x7de0, mload(0x7d40))
            mstore(0x7e00, mload(0x7d60))
            success := and(eq(staticcall(gas(), 0x6, 0x7da0, 0x80, 0x7da0, 0x40), 1), success)
            mstore(0x7e20, 0x2d074c22c492fd00b78120550a825b94b988ca06a00f6bcf5ee9e0aa07480035)
            mstore(0x7e40, 0x2fc44312880b58a30f48459e8a596ea7c0536cf6e1807a98541475e8ddbf9ec6)
            mstore(0x7e60, mload(0x5f60))
            success := and(eq(staticcall(gas(), 0x7, 0x7e20, 0x60, 0x7e20, 0x40), 1), success)
            mstore(0x7e80, mload(0x7da0))
            mstore(0x7ea0, mload(0x7dc0))
            mstore(0x7ec0, mload(0x7e20))
            mstore(0x7ee0, mload(0x7e40))
            success := and(eq(staticcall(gas(), 0x6, 0x7e80, 0x80, 0x7e80, 0x40), 1), success)
            mstore(0x7f00, 0x24e1194cc9020235d4294582250d12bf1b1d3b5ad46c2fd58ce65c36bee8d9ad)
            mstore(0x7f20, 0x0d959c3227ac3b36d4d0262f12a64372771f54d2b1ee57973583c66fee7334ec)
            mstore(0x7f40, mload(0x5f80))
            success := and(eq(staticcall(gas(), 0x7, 0x7f00, 0x60, 0x7f00, 0x40), 1), success)
            mstore(0x7f60, mload(0x7e80))
            mstore(0x7f80, mload(0x7ea0))
            mstore(0x7fa0, mload(0x7f00))
            mstore(0x7fc0, mload(0x7f20))
            success := and(eq(staticcall(gas(), 0x6, 0x7f60, 0x80, 0x7f60, 0x40), 1), success)
            mstore(0x7fe0, 0x0b943c06e6d36d9c592c7d4a08feef4b5e69f27f9acf35ec7de3832eb20269d7)
            mstore(0x8000, 0x28838cb84a4c1a9f838cd703930ba1d30198dd8b8db808fa52c0b46e62de3bbe)
            mstore(0x8020, mload(0x5fa0))
            success := and(eq(staticcall(gas(), 0x7, 0x7fe0, 0x60, 0x7fe0, 0x40), 1), success)
            mstore(0x8040, mload(0x7f60))
            mstore(0x8060, mload(0x7f80))
            mstore(0x8080, mload(0x7fe0))
            mstore(0x80a0, mload(0x8000))
            success := and(eq(staticcall(gas(), 0x6, 0x8040, 0x80, 0x8040, 0x40), 1), success)
            mstore(0x80c0, 0x1d06c6a0ff1cb67d619614e30ea3febec3e2d0ee213b72a240cdce4b8dd0611c)
            mstore(0x80e0, 0x106d82703e82d4de73d48e4bb90dffdabcb202a60b84f36e346b02785ba8b8ee)
            mstore(0x8100, mload(0x5fc0))
            success := and(eq(staticcall(gas(), 0x7, 0x80c0, 0x60, 0x80c0, 0x40), 1), success)
            mstore(0x8120, mload(0x8040))
            mstore(0x8140, mload(0x8060))
            mstore(0x8160, mload(0x80c0))
            mstore(0x8180, mload(0x80e0))
            success := and(eq(staticcall(gas(), 0x6, 0x8120, 0x80, 0x8120, 0x40), 1), success)
            mstore(0x81a0, 0x201c8d3fe26c909f11242b8c871a65db7bd26c8fd1f995694306e2c1e5bcb125)
            mstore(0x81c0, 0x0bd03e760fc283b194034b872aedb5e2e7f5c5845fb9d5d0217fd45298e96f3e)
            mstore(0x81e0, mload(0x5fe0))
            success := and(eq(staticcall(gas(), 0x7, 0x81a0, 0x60, 0x81a0, 0x40), 1), success)
            mstore(0x8200, mload(0x8120))
            mstore(0x8220, mload(0x8140))
            mstore(0x8240, mload(0x81a0))
            mstore(0x8260, mload(0x81c0))
            success := and(eq(staticcall(gas(), 0x6, 0x8200, 0x80, 0x8200, 0x40), 1), success)
            mstore(0x8280, 0x17507d935d37344eb428c618e4f00e4e65db4c1c6779edb7cf403879a1b76cf6)
            mstore(0x82a0, 0x010c67fbc3aff21c1c0c2d7991f10478fec231afede3c73e2816cab758d91183)
            mstore(0x82c0, mload(0x6000))
            success := and(eq(staticcall(gas(), 0x7, 0x8280, 0x60, 0x8280, 0x40), 1), success)
            mstore(0x82e0, mload(0x8200))
            mstore(0x8300, mload(0x8220))
            mstore(0x8320, mload(0x8280))
            mstore(0x8340, mload(0x82a0))
            success := and(eq(staticcall(gas(), 0x6, 0x82e0, 0x80, 0x82e0, 0x40), 1), success)
            mstore(0x8360, 0x275b456241a8b919e9ec5af8114aa05bb0cbeb4a69d698bf0e27941855398726)
            mstore(0x8380, 0x093eab22255f5c378ff208b3fcdaf82c7cd30e5517d9eee01b2963c702f7c1f4)
            mstore(0x83a0, mload(0x6020))
            success := and(eq(staticcall(gas(), 0x7, 0x8360, 0x60, 0x8360, 0x40), 1), success)
            mstore(0x83c0, mload(0x82e0))
            mstore(0x83e0, mload(0x8300))
            mstore(0x8400, mload(0x8360))
            mstore(0x8420, mload(0x8380))
            success := and(eq(staticcall(gas(), 0x6, 0x83c0, 0x80, 0x83c0, 0x40), 1), success)
            mstore(0x8440, 0x1ab71cd4dc2afa8986f0ced4a0e8d88c7e88ca9780ac9f1b26b19c1544b82583)
            mstore(0x8460, 0x2e7cc59a1837f1b9667d7a94bca65f43d666b25a25721e772e1db4a0824e4f05)
            mstore(0x8480, mload(0x6040))
            success := and(eq(staticcall(gas(), 0x7, 0x8440, 0x60, 0x8440, 0x40), 1), success)
            mstore(0x84a0, mload(0x83c0))
            mstore(0x84c0, mload(0x83e0))
            mstore(0x84e0, mload(0x8440))
            mstore(0x8500, mload(0x8460))
            success := and(eq(staticcall(gas(), 0x6, 0x84a0, 0x80, 0x84a0, 0x40), 1), success)
            mstore(0x8520, 0x2c613540c8bfaffba1e8f5468b9071461bb99f291f31748287e4b29f4073b913)
            mstore(0x8540, 0x0910429a6677e1806ccb7c1ab84c210bb7b769b427badbf6196d2ba4a335e6a9)
            mstore(0x8560, mload(0x6060))
            success := and(eq(staticcall(gas(), 0x7, 0x8520, 0x60, 0x8520, 0x40), 1), success)
            mstore(0x8580, mload(0x84a0))
            mstore(0x85a0, mload(0x84c0))
            mstore(0x85c0, mload(0x8520))
            mstore(0x85e0, mload(0x8540))
            success := and(eq(staticcall(gas(), 0x6, 0x8580, 0x80, 0x8580, 0x40), 1), success)
            mstore(0x8600, 0x24876bd18b10d245d6ed4b64afc218216bc4a55f696502b37adc60554ce3c8b3)
            mstore(0x8620, 0x2ecc7d56e08f7ea34e630611928533b98b115739011660d0e2bddca0a5efdf7c)
            mstore(0x8640, mload(0x6080))
            success := and(eq(staticcall(gas(), 0x7, 0x8600, 0x60, 0x8600, 0x40), 1), success)
            mstore(0x8660, mload(0x8580))
            mstore(0x8680, mload(0x85a0))
            mstore(0x86a0, mload(0x8600))
            mstore(0x86c0, mload(0x8620))
            success := and(eq(staticcall(gas(), 0x6, 0x8660, 0x80, 0x8660, 0x40), 1), success)
            mstore(0x86e0, 0x281c117f0376d8361e98d43d7228feff1f3886898349b489d693e2b8b086085e)
            mstore(0x8700, 0x1c9c83c686414c39b4eb8c06167a41e35f5be78ff257e9af161e490645486965)
            mstore(0x8720, mload(0x60a0))
            success := and(eq(staticcall(gas(), 0x7, 0x86e0, 0x60, 0x86e0, 0x40), 1), success)
            mstore(0x8740, mload(0x8660))
            mstore(0x8760, mload(0x8680))
            mstore(0x8780, mload(0x86e0))
            mstore(0x87a0, mload(0x8700))
            success := and(eq(staticcall(gas(), 0x6, 0x8740, 0x80, 0x8740, 0x40), 1), success)
            mstore(0x87c0, 0x160b718386c569a430f0ffecb2b9b62dae93a89db8939d82187786bc967ccc90)
            mstore(0x87e0, 0x22ce69e87006aab13cc794358fa0b4913cf406151dcb4850142e941b795c9433)
            mstore(0x8800, mload(0x60c0))
            success := and(eq(staticcall(gas(), 0x7, 0x87c0, 0x60, 0x87c0, 0x40), 1), success)
            mstore(0x8820, mload(0x8740))
            mstore(0x8840, mload(0x8760))
            mstore(0x8860, mload(0x87c0))
            mstore(0x8880, mload(0x87e0))
            success := and(eq(staticcall(gas(), 0x6, 0x8820, 0x80, 0x8820, 0x40), 1), success)
            mstore(0x88a0, 0x0d4f533b6dc3171f4a86f0cc9e5719b057bfa6d3638b085d52e2b5c9fba764fc)
            mstore(0x88c0, 0x0f5081a48c03c47a7fac826dd084ac7ccdb82fc136c93df19733d9b0652a425d)
            mstore(0x88e0, mload(0x60e0))
            success := and(eq(staticcall(gas(), 0x7, 0x88a0, 0x60, 0x88a0, 0x40), 1), success)
            mstore(0x8900, mload(0x8820))
            mstore(0x8920, mload(0x8840))
            mstore(0x8940, mload(0x88a0))
            mstore(0x8960, mload(0x88c0))
            success := and(eq(staticcall(gas(), 0x6, 0x8900, 0x80, 0x8900, 0x40), 1), success)
            mstore(0x8980, 0x23a2c9d7684fd80cf825d575b8229bb217036be800919f46634fb4f27d11dc07)
            mstore(0x89a0, 0x1d5355e031a8f882336d0b5fe0cdc971136ed387f0da4b4028538154f20c0466)
            mstore(0x89c0, mload(0x6100))
            success := and(eq(staticcall(gas(), 0x7, 0x8980, 0x60, 0x8980, 0x40), 1), success)
            mstore(0x89e0, mload(0x8900))
            mstore(0x8a00, mload(0x8920))
            mstore(0x8a20, mload(0x8980))
            mstore(0x8a40, mload(0x89a0))
            success := and(eq(staticcall(gas(), 0x6, 0x89e0, 0x80, 0x89e0, 0x40), 1), success)
            mstore(0x8a60, 0x011f81c2ad3a082765839de493b4e0d21d1927969314cd4e4a4ec2da15421abc)
            mstore(0x8a80, 0x0d3e031b7421b6f45c6d125b9bde4e0ad6f51b1bb3190e07265632ae82922a35)
            mstore(0x8aa0, mload(0x6120))
            success := and(eq(staticcall(gas(), 0x7, 0x8a60, 0x60, 0x8a60, 0x40), 1), success)
            mstore(0x8ac0, mload(0x89e0))
            mstore(0x8ae0, mload(0x8a00))
            mstore(0x8b00, mload(0x8a60))
            mstore(0x8b20, mload(0x8a80))
            success := and(eq(staticcall(gas(), 0x6, 0x8ac0, 0x80, 0x8ac0, 0x40), 1), success)
            mstore(0x8b40, 0x2d95e47a48769159b9cc37afe25dda9f3363590b8eb5b245bba9b2c84ab6f926)
            mstore(0x8b60, 0x2b6f41be4b78b40bd13c666b7f49ec79c9cd0d29dd871b88a7366b6ba8129795)
            mstore(0x8b80, mload(0x6140))
            success := and(eq(staticcall(gas(), 0x7, 0x8b40, 0x60, 0x8b40, 0x40), 1), success)
            mstore(0x8ba0, mload(0x8ac0))
            mstore(0x8bc0, mload(0x8ae0))
            mstore(0x8be0, mload(0x8b40))
            mstore(0x8c00, mload(0x8b60))
            success := and(eq(staticcall(gas(), 0x6, 0x8ba0, 0x80, 0x8ba0, 0x40), 1), success)
            mstore(0x8c20, 0x20bae09bcc4b3093804e1768602b5ba8f4562f5ef41f2538b2d442bf45a774ab)
            mstore(0x8c40, 0x2f5b2339ce982b9abe27e85c02d53d0f887baf788fdf1d0b8062f1761acc96db)
            mstore(0x8c60, mload(0x6160))
            success := and(eq(staticcall(gas(), 0x7, 0x8c20, 0x60, 0x8c20, 0x40), 1), success)
            mstore(0x8c80, mload(0x8ba0))
            mstore(0x8ca0, mload(0x8bc0))
            mstore(0x8cc0, mload(0x8c20))
            mstore(0x8ce0, mload(0x8c40))
            success := and(eq(staticcall(gas(), 0x6, 0x8c80, 0x80, 0x8c80, 0x40), 1), success)
            mstore(0x8d00, 0x072ca771e6216f5f39c051ba39cb1ec27e167f85624ffedcd409acd06938c70f)
            mstore(0x8d20, 0x1b501fc86164ee3e7e7fdce0eddfcc0ab6a4e2db8c82d1e3659cef0918206ddb)
            mstore(0x8d40, mload(0x6180))
            success := and(eq(staticcall(gas(), 0x7, 0x8d00, 0x60, 0x8d00, 0x40), 1), success)
            mstore(0x8d60, mload(0x8c80))
            mstore(0x8d80, mload(0x8ca0))
            mstore(0x8da0, mload(0x8d00))
            mstore(0x8dc0, mload(0x8d20))
            success := and(eq(staticcall(gas(), 0x6, 0x8d60, 0x80, 0x8d60, 0x40), 1), success)
            mstore(0x8de0, 0x0c55e76fe3cd84ba0c6dfffaefe9b07bacebe2f0d97eba076e9224e0e502587f)
            mstore(0x8e00, 0x21425bef486b4f0ba8a593ab74a02e82cb16b3c22dcfdb17df801c5354028c4a)
            mstore(0x8e20, mload(0x61a0))
            success := and(eq(staticcall(gas(), 0x7, 0x8de0, 0x60, 0x8de0, 0x40), 1), success)
            mstore(0x8e40, mload(0x8d60))
            mstore(0x8e60, mload(0x8d80))
            mstore(0x8e80, mload(0x8de0))
            mstore(0x8ea0, mload(0x8e00))
            success := and(eq(staticcall(gas(), 0x6, 0x8e40, 0x80, 0x8e40, 0x40), 1), success)
            mstore(0x8ec0, 0x00cbdd0e713fd0cfd50af9b1382f5a5100ec211ff5a08d600404e5d482774a03)
            mstore(0x8ee0, 0x062fcb3eecae0dce7de9c1cf898451fe174ffd26e53525bc0332ee29c3d149c7)
            mstore(0x8f00, mload(0x61c0))
            success := and(eq(staticcall(gas(), 0x7, 0x8ec0, 0x60, 0x8ec0, 0x40), 1), success)
            mstore(0x8f20, mload(0x8e40))
            mstore(0x8f40, mload(0x8e60))
            mstore(0x8f60, mload(0x8ec0))
            mstore(0x8f80, mload(0x8ee0))
            success := and(eq(staticcall(gas(), 0x6, 0x8f20, 0x80, 0x8f20, 0x40), 1), success)
            mstore(0x8fa0, mload(0x9a0))
            mstore(0x8fc0, mload(0x9c0))
            mstore(0x8fe0, mload(0x61e0))
            success := and(eq(staticcall(gas(), 0x7, 0x8fa0, 0x60, 0x8fa0, 0x40), 1), success)
            mstore(0x9000, mload(0x8f20))
            mstore(0x9020, mload(0x8f40))
            mstore(0x9040, mload(0x8fa0))
            mstore(0x9060, mload(0x8fc0))
            success := and(eq(staticcall(gas(), 0x6, 0x9000, 0x80, 0x9000, 0x40), 1), success)
            mstore(0x9080, mload(0x9e0))
            mstore(0x90a0, mload(0xa00))
            mstore(0x90c0, mload(0x6200))
            success := and(eq(staticcall(gas(), 0x7, 0x9080, 0x60, 0x9080, 0x40), 1), success)
            mstore(0x90e0, mload(0x9000))
            mstore(0x9100, mload(0x9020))
            mstore(0x9120, mload(0x9080))
            mstore(0x9140, mload(0x90a0))
            success := and(eq(staticcall(gas(), 0x6, 0x90e0, 0x80, 0x90e0, 0x40), 1), success)
            mstore(0x9160, mload(0xa20))
            mstore(0x9180, mload(0xa40))
            mstore(0x91a0, mload(0x6220))
            success := and(eq(staticcall(gas(), 0x7, 0x9160, 0x60, 0x9160, 0x40), 1), success)
            mstore(0x91c0, mload(0x90e0))
            mstore(0x91e0, mload(0x9100))
            mstore(0x9200, mload(0x9160))
            mstore(0x9220, mload(0x9180))
            success := and(eq(staticcall(gas(), 0x6, 0x91c0, 0x80, 0x91c0, 0x40), 1), success)
            mstore(0x9240, mload(0xa60))
            mstore(0x9260, mload(0xa80))
            mstore(0x9280, mload(0x6240))
            success := and(eq(staticcall(gas(), 0x7, 0x9240, 0x60, 0x9240, 0x40), 1), success)
            mstore(0x92a0, mload(0x91c0))
            mstore(0x92c0, mload(0x91e0))
            mstore(0x92e0, mload(0x9240))
            mstore(0x9300, mload(0x9260))
            success := and(eq(staticcall(gas(), 0x6, 0x92a0, 0x80, 0x92a0, 0x40), 1), success)
            mstore(0x9320, mload(0x900))
            mstore(0x9340, mload(0x920))
            mstore(0x9360, mload(0x6260))
            success := and(eq(staticcall(gas(), 0x7, 0x9320, 0x60, 0x9320, 0x40), 1), success)
            mstore(0x9380, mload(0x92a0))
            mstore(0x93a0, mload(0x92c0))
            mstore(0x93c0, mload(0x9320))
            mstore(0x93e0, mload(0x9340))
            success := and(eq(staticcall(gas(), 0x6, 0x9380, 0x80, 0x9380, 0x40), 1), success)
            mstore(0x9400, mload(0x1280))
            mstore(0x9420, mload(0x12a0))
            mstore(0x9440, mload(0x6a00))
            success := and(eq(staticcall(gas(), 0x7, 0x9400, 0x60, 0x9400, 0x40), 1), success)
            mstore(0x9460, mload(0x9380))
            mstore(0x9480, mload(0x93a0))
            mstore(0x94a0, mload(0x9400))
            mstore(0x94c0, mload(0x9420))
            success := and(eq(staticcall(gas(), 0x6, 0x9460, 0x80, 0x9460, 0x40), 1), success)
            mstore(0x94e0, mload(0x12c0))
            mstore(0x9500, mload(0x12e0))
            mstore(0x9520, mload(0x6a40))
            success := and(eq(staticcall(gas(), 0x7, 0x94e0, 0x60, 0x94e0, 0x40), 1), success)
            mstore(0x9540, mload(0x9460))
            mstore(0x9560, mload(0x9480))
            mstore(0x9580, mload(0x94e0))
            mstore(0x95a0, mload(0x9500))
            success := and(eq(staticcall(gas(), 0x6, 0x9540, 0x80, 0x9540, 0x40), 1), success)
            mstore(0x95c0, mload(0x1300))
            mstore(0x95e0, mload(0x1320))
            mstore(0x9600, mload(0x6a80))
            success := and(eq(staticcall(gas(), 0x7, 0x95c0, 0x60, 0x95c0, 0x40), 1), success)
            mstore(0x9620, mload(0x9540))
            mstore(0x9640, mload(0x9560))
            mstore(0x9660, mload(0x95c0))
            mstore(0x9680, mload(0x95e0))
            success := and(eq(staticcall(gas(), 0x6, 0x9620, 0x80, 0x9620, 0x40), 1), success)
            mstore(0x96a0, mload(0x1340))
            mstore(0x96c0, mload(0x1360))
            mstore(0x96e0, mload(0x6ac0))
            success := and(eq(staticcall(gas(), 0x7, 0x96a0, 0x60, 0x96a0, 0x40), 1), success)
            mstore(0x9700, mload(0x9620))
            mstore(0x9720, mload(0x9640))
            mstore(0x9740, mload(0x96a0))
            mstore(0x9760, mload(0x96c0))
            success := and(eq(staticcall(gas(), 0x6, 0x9700, 0x80, 0x9700, 0x40), 1), success)
            mstore(0x9780, mload(0x12c0))
            mstore(0x97a0, mload(0x12e0))
            mstore(0x97c0, mload(0x6480))
            success := and(eq(staticcall(gas(), 0x7, 0x9780, 0x60, 0x9780, 0x40), 1), success)
            mstore(0x97e0, mload(0x1280))
            mstore(0x9800, mload(0x12a0))
            mstore(0x9820, mload(0x9780))
            mstore(0x9840, mload(0x97a0))
            success := and(eq(staticcall(gas(), 0x6, 0x97e0, 0x80, 0x97e0, 0x40), 1), success)
            mstore(0x9860, mload(0x1300))
            mstore(0x9880, mload(0x1320))
            mstore(0x98a0, mload(0x66e0))
            success := and(eq(staticcall(gas(), 0x7, 0x9860, 0x60, 0x9860, 0x40), 1), success)
            mstore(0x98c0, mload(0x97e0))
            mstore(0x98e0, mload(0x9800))
            mstore(0x9900, mload(0x9860))
            mstore(0x9920, mload(0x9880))
            success := and(eq(staticcall(gas(), 0x6, 0x98c0, 0x80, 0x98c0, 0x40), 1), success)
            mstore(0x9940, mload(0x1340))
            mstore(0x9960, mload(0x1360))
            mstore(0x9980, mload(0x6880))
            success := and(eq(staticcall(gas(), 0x7, 0x9940, 0x60, 0x9940, 0x40), 1), success)
            mstore(0x99a0, mload(0x98c0))
            mstore(0x99c0, mload(0x98e0))
            mstore(0x99e0, mload(0x9940))
            mstore(0x9a00, mload(0x9960))
            success := and(eq(staticcall(gas(), 0x6, 0x99a0, 0x80, 0x99a0, 0x40), 1), success)
            mstore(0x9a20, mload(0x9700))
            mstore(0x9a40, mload(0x9720))
            mstore(0x9a60, mload(0x99a0))
            mstore(0x9a80, mload(0x99c0))
            mstore(0x9aa0, mload(0x13e0))
            mstore(0x9ac0, mload(0x1400))
            mstore(0x9ae0, mload(0x1420))
            mstore(0x9b00, mload(0x1440))
            mstore(0x9b20, keccak256(0x9a20, 256))
            mstore(39744, mod(mload(39712), f_q))
            mstore(0x9b60, mulmod(mload(0x9b40), mload(0x9b40), f_q))
            mstore(0x9b80, mulmod(1, mload(0x9b40), f_q))
            mstore(0x9ba0, mload(0x9aa0))
            mstore(0x9bc0, mload(0x9ac0))
            mstore(0x9be0, mload(0x9b80))
            success := and(eq(staticcall(gas(), 0x7, 0x9ba0, 0x60, 0x9ba0, 0x40), 1), success)
            mstore(0x9c00, mload(0x9a20))
            mstore(0x9c20, mload(0x9a40))
            mstore(0x9c40, mload(0x9ba0))
            mstore(0x9c60, mload(0x9bc0))
            success := and(eq(staticcall(gas(), 0x6, 0x9c00, 0x80, 0x9c00, 0x40), 1), success)
            mstore(0x9c80, mload(0x9ae0))
            mstore(0x9ca0, mload(0x9b00))
            mstore(0x9cc0, mload(0x9b80))
            success := and(eq(staticcall(gas(), 0x7, 0x9c80, 0x60, 0x9c80, 0x40), 1), success)
            mstore(0x9ce0, mload(0x9a60))
            mstore(0x9d00, mload(0x9a80))
            mstore(0x9d20, mload(0x9c80))
            mstore(0x9d40, mload(0x9ca0))
            success := and(eq(staticcall(gas(), 0x6, 0x9ce0, 0x80, 0x9ce0, 0x40), 1), success)
            mstore(0x9d60, mload(0x9c00))
            mstore(0x9d80, mload(0x9c20))
            mstore(0x9da0, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x9dc0, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x9de0, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x9e00, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
            mstore(0x9e20, mload(0x9ce0))
            mstore(0x9e40, mload(0x9d00))
            mstore(0x9e60, 0x0181624e80f3d6ae28df7e01eaeab1c0e919877a3b8a6b7fbc69a6817d596ea2)
            mstore(0x9e80, 0x1783d30dcb12d259bb89098addf6280fa4b653be7a152542a28f7b926e27e648)
            mstore(0x9ea0, 0x00ae44489d41a0d179e2dfdc03bddd883b7109f8b6ae316a59e815c1a6b35304)
            mstore(0x9ec0, 0x0b2147ab62a386bd63e6de1522109b8c9588ab466f5aadfde8c41ca3749423ee)
            success := and(eq(staticcall(gas(), 0x8, 0x9d60, 0x180, 0x9d60, 0x20), 1), success)
            success := and(eq(mload(0x9d60), 1), success)

            if not(success) { revert(0, 0) }
            mstore(0x00, 0x93ac8fdbfc0b0608f9195474a0dd6242f019f5abc3c4e26ad51fefb059cc0177)
            return(0, 32)

        }
    }
}
